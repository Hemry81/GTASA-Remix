#usda 1.0
(
    upAxis = "Z"
)

over "RootNode"
{
    over "Looks"
    {
        over "mat_05D81D806AE2DE92"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/effect/rain_01_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:emissive_mask_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/effect/rain_01_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_2F580E4763FAB662"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/effect/2F580E4763FAB662_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 10 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./texture/effect/2F580E4763FAB662_emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_B51546930E6B5738"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/effect/B51546930E6B5738_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/effect/B51546930E6B5738_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_5DD8C4686D5FF3D2"
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                asset inputs:diffuse_texture = @@
                float inputs:emissive_intensity = 0.001 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./texture/effect/5DD8C4686D5FF3D2_emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color Texture"
                    doc = "The texture masking the emissive color"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                float inputs:ior_constant = 2.418 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:transmittance_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance Color/Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:use_diffuse_layer = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_AF2FF583DF2F15D6"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/effect/AF2FF583DF2F15D6_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
            }
        }

        over "mat_66EFA5FE769C8102"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/effect/Skid_Mark_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/effect/Skid_Mark_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/effect/Skid_Mark_rough.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_48188D919022F08A"
        {
            over "Shader"
            {
                uniform bool enable_opacity = 1
                asset inputs:diffuse_texture = @./texture/effect/gun_fire_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:emissive_intensity = 30 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = """Intensity of the emission

"""
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./texture/effect/gun_fire_emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = """The texture masking the emissive color

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = """Enables the emission of light from the material

"""
                    hidden = false
                )
            }
        }

        over "mat_76BD5D19A139B6BC"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/effect/76BD5D19A139B6BC_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 3000 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./texture/effect/76BD5D19A139B6BC_emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/effect/76BD5D19A139B6BC_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
            }
        }

        over "mat_BE686B6B6B8AE7ED"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/effect/blood_01_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/effect/blood_01_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/effect/blood_01_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_FA2BCD3686C0FA3D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/effect/cars_scratch_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./texture/effect/cars_scratch_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./texture/effect/cars_scratch_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_CE919FA9A67900C4"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/effect/Smoke_02_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
            }
        }

        over "mat_B573F6EEBBA1EC5D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/effect/fire_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 3000 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./texture/effect/fire_emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_DF22766F02C29A32"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/effect/gun_fire_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 100 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./texture/effect/gun_fire_emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
            }
        }

        over "mat_A79A316B36E6FB9A"
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                asset inputs:diffuse_texture = @@
                float inputs:ior_constant = 1.3299999 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/effect/droplets_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                bool inputs:thin_walled = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                float inputs:transmittance_measurement_distance = 65504 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 65504
                            float min = 0.001
                        }
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance Measurement Distance"
                    doc = "Distance to match the transmittance through the volume at."
                    hidden = false
                )
                asset inputs:transmittance_texture = @./texture/effect/droplets_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_448152B6FE9F348C"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/effect/Smoke_01_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/effect/Smoke_01_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
            }
        }
    }

    over "meshes"
    {
        over "mesh_AD224C74FA8E50CA"
        {
            custom int preserveOriginalDrawCall = 0

            def DiskLight "Waypoint_Light_down_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                color3f inputs:color = (1, 0.5000001, 0.5)
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 10
                bool inputs:normalize = 1
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool light:enableCaustics = 0
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (60, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0.35)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def DiskLight "Waypoint_Light_up_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    color3f inputs:color = (1, 0.5000001, 0.5)
                    bool inputs:enableColorTemperature = 0
                    float inputs:intensity = 50
                    bool inputs:normalize = 0
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool light:enableCaustics = 0
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 9.213864311005248e-15, -180)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def DiskLight "Waypoint_Light_down_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                color3f inputs:color = (0.5, 1, 0.5)
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 10
                bool inputs:normalize = 1
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool light:enableCaustics = 0
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (60, 0, 120)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0.35)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def DiskLight "Waypoint_Light_up_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    color3f inputs:color = (0.5, 1, 0.5)
                    bool inputs:enableColorTemperature = 0
                    float inputs:intensity = 50
                    bool inputs:normalize = 0
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool light:enableCaustics = 0
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 9.213864311005248e-15, -180)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def DiskLight "Waypoint_Light_down_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                color3f inputs:color = (0.5, 0.5, 1)
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 10
                bool inputs:normalize = 1
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool light:enableCaustics = 0
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (60, 0, 240)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0.35)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def DiskLight "Waypoint_Light_up_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    color3f inputs:color = (0.5, 0.5, 1)
                    bool inputs:enableColorTemperature = 0
                    float inputs:intensity = 50
                    bool inputs:normalize = 0
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool light:enableCaustics = 0
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 9.213864311005248e-15, -180)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def DiskLight "Waypoint_Light_down_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                color3f inputs:color = (1, 0.5000001, 0.5)
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 10
                bool inputs:normalize = 1
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool light:enableCaustics = 0
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (60, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, -1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def DiskLight "Waypoint_Light_up_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    color3f inputs:color = (1, 0.5000001, 0.5)
                    bool inputs:enableColorTemperature = 0
                    float inputs:intensity = 50
                    bool inputs:normalize = 0
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool light:enableCaustics = 0
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 9.213864311005248e-15, -180)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def DiskLight "Waypoint_Light_down_05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                color3f inputs:color = (0.5, 1, 0.5)
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 10
                bool inputs:normalize = 1
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool light:enableCaustics = 0
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (60, 0, 120)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, -1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def DiskLight "Waypoint_Light_up_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    color3f inputs:color = (0.5, 1, 0.5)
                    bool inputs:enableColorTemperature = 0
                    float inputs:intensity = 50
                    bool inputs:normalize = 0
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool light:enableCaustics = 0
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 9.213864311005248e-15, -180)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def DiskLight "Waypoint_Light_down_06" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                color3f inputs:color = (0.5, 0.5, 1)
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 10
                bool inputs:normalize = 1
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool light:enableCaustics = 0
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (60, 0, 240)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, -1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def DiskLight "Waypoint_Light_up_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    color3f inputs:color = (0.5, 0.5, 1)
                    bool inputs:enableColorTemperature = 0
                    float inputs:intensity = 50
                    bool inputs:normalize = 0
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool light:enableCaustics = 0
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 9.213864311005248e-15, -180)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_AD224C74FA8E50CA_0" (
                delete references = @./meshes/effectWaypoint 03.usd@
                prepend references = @./meshes/effect/Waypoint 03.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_CC8AB8063489A3F8"
        {
            custom int preserveOriginalDrawCall = 0

            def Xform "Xform_CC8AB8063489A3F8_0" (
                delete references = @./meshes/effectWaypoint 04.usd@
                prepend references = @./meshes/effect/Waypoint 04.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Cylinder_001"
                {
                    float3 xformOp:scale = (100, 100, 100)
                }
            }

            over "mesh" (
                active = false
            )
            {
            }

            def DiskLight "Waypoint_Light_down_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                color3f inputs:color = (1, 0.5000001, 0.5)
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 5
                bool inputs:normalize = 1
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool light:enableCaustics = 0
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (60, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0.5000000074505806, 0.25)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def DiskLight "Waypoint_Light_up_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    color3f inputs:color = (1, 0.5000001, 0.5)
                    bool inputs:enableColorTemperature = 0
                    float inputs:intensity = 5
                    bool inputs:normalize = 0
                    float inputs:radius = 0.25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool light:enableCaustics = 0
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 9.213864311005248e-15, -180)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def DiskLight "Waypoint_Light_down_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                color3f inputs:color = (0.5, 1, 0.5)
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 5
                bool inputs:normalize = 1
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool light:enableCaustics = 0
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (60, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.5, 0, 0.25)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def DiskLight "Waypoint_Light_up_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    color3f inputs:color = (0.5, 1, 0.5)
                    bool inputs:enableColorTemperature = 0
                    float inputs:intensity = 5
                    bool inputs:normalize = 0
                    float inputs:radius = 0.25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool light:enableCaustics = 0
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 9.213864311005248e-15, -180)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def DiskLight "Waypoint_Light_down_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                color3f inputs:color = (0.5, 0.5, 1)
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 5
                bool inputs:normalize = 1
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool light:enableCaustics = 0
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (60, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.5, 0, 0.25)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def DiskLight "Waypoint_Light_up_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    color3f inputs:color = (0.5, 0.5, 1)
                    bool inputs:enableColorTemperature = 0
                    float inputs:intensity = 5
                    bool inputs:normalize = 0
                    float inputs:radius = 0.25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool light:enableCaustics = 0
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 9.213864311005248e-15, -180)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def DiskLight "Waypoint_Light_down_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                color3f inputs:color = (1, 0.5000001, 0.5)
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 5
                bool inputs:normalize = 1
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool light:enableCaustics = 0
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (60, 0, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0.5000000074505806, 0.25)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def DiskLight "Waypoint_Light_up_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    color3f inputs:color = (1, 0.5000001, 0.5)
                    bool inputs:enableColorTemperature = 0
                    float inputs:intensity = 5
                    bool inputs:normalize = 0
                    float inputs:radius = 0.25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool light:enableCaustics = 0
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 9.213864311005248e-15, -180)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def DiskLight "Waypoint_Light_down_05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                color3f inputs:color = (0.5, 1, 0.5)
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 5
                bool inputs:normalize = 1
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool light:enableCaustics = 0
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (60, 0, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.5, 0, 0.25)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def DiskLight "Waypoint_Light_up_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    color3f inputs:color = (0.5, 1, 0.5)
                    bool inputs:enableColorTemperature = 0
                    float inputs:intensity = 5
                    bool inputs:normalize = 0
                    float inputs:radius = 0.25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool light:enableCaustics = 0
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 9.213864311005248e-15, -180)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def DiskLight "Waypoint_Light_down_06" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                color3f inputs:color = (0.5, 0.5, 1)
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 5
                bool inputs:normalize = 1
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool light:enableCaustics = 0
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (60, 0, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.5, 0, 0.25)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def DiskLight "Waypoint_Light_up_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    color3f inputs:color = (0.5, 0.5, 1)
                    bool inputs:enableColorTemperature = 0
                    float inputs:intensity = 5
                    bool inputs:normalize = 0
                    float inputs:radius = 0.25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool light:enableCaustics = 0
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 9.213864311005248e-15, -180)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def DiskLight "Waypoint_Light_down_07" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                color3f inputs:color = (1, 0.5000001, 0.5)
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 5
                bool inputs:normalize = 1
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool light:enableCaustics = 0
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (60, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0.5000000074505806, 1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def DiskLight "Waypoint_Light_up_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    color3f inputs:color = (1, 0.5000001, 0.5)
                    bool inputs:enableColorTemperature = 0
                    float inputs:intensity = 5
                    bool inputs:normalize = 0
                    float inputs:radius = 0.25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool light:enableCaustics = 0
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 9.213864311005248e-15, -180)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def DiskLight "Waypoint_Light_down_08" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                color3f inputs:color = (0.5, 1, 0.5)
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 5
                bool inputs:normalize = 1
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool light:enableCaustics = 0
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (60, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.5, 0, 1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def DiskLight "Waypoint_Light_up_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    color3f inputs:color = (0.5, 1, 0.5)
                    bool inputs:enableColorTemperature = 0
                    float inputs:intensity = 5
                    bool inputs:normalize = 0
                    float inputs:radius = 0.25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool light:enableCaustics = 0
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 9.213864311005248e-15, -180)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def DiskLight "Waypoint_Light_down_09" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                color3f inputs:color = (0.5, 0.5, 1)
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 5
                bool inputs:normalize = 1
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool light:enableCaustics = 0
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (60, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.5, 0, 1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def DiskLight "Waypoint_Light_up_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    color3f inputs:color = (0.5, 0.5, 1)
                    bool inputs:enableColorTemperature = 0
                    float inputs:intensity = 5
                    bool inputs:normalize = 0
                    float inputs:radius = 0.25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool light:enableCaustics = 0
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 9.213864311005248e-15, -180)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def DiskLight "Waypoint_Light_down_10" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                color3f inputs:color = (1, 0.5000001, 0.5)
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 5
                bool inputs:normalize = 1
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool light:enableCaustics = 0
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (60, 0, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0.5000000074505806, 1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def DiskLight "Waypoint_Light_up_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    color3f inputs:color = (1, 0.5000001, 0.5)
                    bool inputs:enableColorTemperature = 0
                    float inputs:intensity = 5
                    bool inputs:normalize = 0
                    float inputs:radius = 0.25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool light:enableCaustics = 0
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 9.213864311005248e-15, -180)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def DiskLight "Waypoint_Light_down_11" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                color3f inputs:color = (0.5, 1, 0.5)
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 5
                bool inputs:normalize = 1
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool light:enableCaustics = 0
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (60, 0, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.5, 0, 1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def DiskLight "Waypoint_Light_up_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    color3f inputs:color = (0.5, 1, 0.5)
                    bool inputs:enableColorTemperature = 0
                    float inputs:intensity = 5
                    bool inputs:normalize = 0
                    float inputs:radius = 0.25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool light:enableCaustics = 0
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 9.213864311005248e-15, -180)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def DiskLight "Waypoint_Light_down_12" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                color3f inputs:color = (0.5, 0.5, 1)
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 5
                bool inputs:normalize = 1
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool light:enableCaustics = 0
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (60, 0, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.5, 0, 1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def DiskLight "Waypoint_Light_up_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    color3f inputs:color = (0.5, 0.5, 1)
                    bool inputs:enableColorTemperature = 0
                    float inputs:intensity = 5
                    bool inputs:normalize = 0
                    float inputs:radius = 0.25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool light:enableCaustics = 0
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 9.213864311005248e-15, -180)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }
    }
}

