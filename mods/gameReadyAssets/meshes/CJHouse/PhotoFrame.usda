#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.0.0 Alpha"
    endTimeCode = 0
    metersPerUnit = 0.01
    startTimeCode = -1
    upAxis = "Z"
)

def Xform "root"
{
    float3 xformOp:rotateXYZ = (0, 0, 0)
    float3 xformOp:scale = (100, 100, 100)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    def Xform "Background_Paper" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @./Photo_Paper.usd@
    )
    {
        rel material:binding = </root/Paper> (
            bindMaterialAs = "weakerThanDescendants"
        )
        custom string userProperties:blenderName:object = "Background_Paper"
        float3 xformOp:rotateXYZ = (0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Xform "Glass" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @./Photo_Glass.usd@
    )
    {
        rel material:binding = </root/Glass_01> (
            bindMaterialAs = "weakerThanDescendants"
        )
        custom string userProperties:blenderName:object = "Glass"
        token visibility = "inherited"
        float3 xformOp:rotateXYZ = (0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Xform "Frame" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @./Photo_Frame.usd@
    )
    {
        rel material:binding = </root/PhotoFrame> (
            bindMaterialAs = "weakerThanDescendants"
        )
        custom string userProperties:blenderName:object = "Frame"
        float3 xformOp:rotateXYZ = (0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Xform "Picture" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @./Photo_Picture.usd@
    )
    {
        rel material:binding = </root/Picture_01> (
            bindMaterialAs = "weakerThanDescendants"
        )
        float3 xformOp:rotateXYZ = (0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Material "PhotoFrame"
    {
        token outputs:mdl:displacement.connect = </root/PhotoFrame/Shader.outputs:out>
        token outputs:mdl:surface.connect = </root/PhotoFrame/Shader.outputs:out>
        token outputs:mdl:volume.connect = </root/PhotoFrame/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @../../texture/wood/Wood 04_diffuse.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:normalmap_texture = @../../texture/wood/Wood 04_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:reflectionroughness_texture = @../../texture/wood/Wood 04_roughness.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_01"
    {
        token outputs:mdl:displacement.connect = </root/Glass_01/Shader.outputs:out>
        token outputs:mdl:surface.connect = </root/Glass_01/Shader.outputs:out>
        token outputs:mdl:volume.connect = </root/Glass_01/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.5999999 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            bool inputs:thin_walled = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Specular"
                displayName = "Thin-walled"
                doc = """Whether the material is thin-walled

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Paper"
    {
        token outputs:mdl:displacement.connect = </root/Paper/Shader.outputs:out>
        token outputs:mdl:surface.connect = </root/Paper/Shader.outputs:out>
        token outputs:mdl:volume.connect = </root/Paper/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9227799, 0.8908739, 0.83727133) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Base Color"
                doc = """The base albedo color to use if no texture is specified

"""
                hidden = false
                renderType = "color"
            )
            float inputs:reflection_roughness_constant = 0.84999996 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Picture_01"
    {
        token outputs:mdl:displacement.connect = </root/Picture_01/Shader.outputs:out>
        token outputs:mdl:surface.connect = </root/Picture_01/Shader.outputs:out>
        token outputs:mdl:volume.connect = </root/Picture_01/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            float inputs:reflection_roughness_constant = 0.19999999 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }
}

