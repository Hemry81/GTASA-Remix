#usda 1.0
(
    upAxis = "Z"
)

over "RootNode"
{
    over "meshes"
    {
        over "mesh_94A0687761B5F008"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Chair" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./chair.usd@
            )
            {
                rel material:binding = </Looks/Painted_White_Metail> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 73.70000109821558)
                double3 xformOp:scale = (1.2000000178813934, 1.2000000178813934, 1.2000000178813934)
                double3 xformOp:translate = (-9.700000144541264, -4.400000065565109, -2.38)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Chair_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./chair.usd@
            )
            {
                rel material:binding = </Looks/Painted_White_Metail> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 165.6000024676323)
                double3 xformOp:scale = (1.2000000178813934, 1.2000000178813934, 1.2000000178813934)
                double3 xformOp:translate = (-8.800000131130219, -6.500000096857548, -2.38)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Chair_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./chair.usd@
            )
            {
                rel material:binding = </Looks/Painted_White_Metail> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 198.5000029578805)
                double3 xformOp:scale = (1.2000000178813934, 1.2000000178813934, 1.2000000178813934)
                double3 xformOp:translate = (-7.900000117719173, -6.500000096857548, -2.38)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_47B507E8DF408E3B"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "wooden_table_01" (
                prepend references = @./Wooden_table_02_4k.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 4.200000062584877)
                double3 xformOp:scale = (2.2000000327825546, 1.8000000268220901, 1.183)
                double3 xformOp:translate = (-8.400000125169754, -5.500000081956387, -2.500000037252903)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "wooden_table_02" (
                prepend references = @./Wooden_table_02_4k.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -103.0000015348196)
                double3 xformOp:scale = (1.700000025331974, 1.600000023841858, 0.7000000104308128)
                double3 xformOp:translate = (-8.100000120699406, 0.30000000447034836, -2.4)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Cube_003"
                {
                    double3 xformOp:rotateXYZ = (0, 0, 8.00000011920929)
                    double3 xformOp:scale = (1.03, 1, 1)
                    double3 xformOp:translate = (-0.09, 0.07, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "wooden_table_03" (
                prepend references = @./Wooden_table_02_4k.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -90.10000134259462)
                double3 xformOp:scale = (2.8000000417232513, 2.1000000312924385, 1.2000000178813934)
                double3 xformOp:translate = (-7.900000117719173, -10.000000149011612, -2.500000037252903)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_8E63B7467C93F8E0" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Looks/Leather_CJHouse_Single_Couch> (
                bindMaterialAs = "weakerThanDescendants"
            )

            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Armchaircc0" (
                prepend references = @./armchairCC0.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -91.00000135600567)
                double3 xformOp:scale = (1.1000000163912773, 1.1000000163912773, 1.1000000163912773)
                double3 xformOp:translate = (-5.900000087916851, -0.10000000149011612, -2.400000035762787)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Armchaircc0_2" (
                prepend references = @./armchairCC0.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -61.80000092089176)
                double3 xformOp:scale = (1.1000000163912773, 1.1000000163912773, 1.1000000163912773)
                double3 xformOp:translate = (-6.000000089406967, 1.4000000208616257, -2.400000035762787)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_A3D947A309A76631"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Plant" (
                prepend references = @./planttablecj.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_A3D947A309A76631/Plant01> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.0000000149011612, 1.0000000149011612, 0.6000000089406967)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Plant01"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_A3D947A309A76631/Plant01/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_A3D947A309A76631/Plant01/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_A3D947A309A76631/Plant01/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../texture/CJHouse/potted_plant_02_leaves_diff_4k.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                        hidden = false
                    )
                    asset inputs:height_texture = @../../texture/CJHouse/potted_plant_02_leaves_disp_4k.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @../../texture/CJHouse/potted_plant_02_leaves_nor_dx_4k.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @../../texture/CJHouse/potted_plant_02_leaves_rough_4k.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        over "mesh_02C24D2ABC64C34C"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "plant" (
                prepend references = @./planttablecj2.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 0.7000000104308128)
                double3 xformOp:translate = (0, 0, -0.30000000447034836)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_3810A0F543440BB2"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "plant" (
                prepend references = @./planttablecj3.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.0000000149011612, 0.91, 1.0000000149011612)
                double3 xformOp:translate = (-0.13, 0.125, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_AD5459D6015AEB6A"
        {
            rel material:binding = </RootNode/Looks/mat_B804E0D4DCB9B449> (
                bindMaterialAs = "weakerThanDescendants"
            )

            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Kitchen_Wall" (
                prepend references = @./fenetre.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_C55E311692B328E5"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "TV" (
                prepend references = @./Television_01_4k.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 34.50000051409006)
                double3 xformOp:scale = (1.4000000208616257, 1.4000000208616257, 1.4000000208616257)
                double3 xformOp:translate = (-9.900000147521496, 3.1000000461935997, -1.85)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_2532EE892B3E6065"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Front_door" (
                prepend references = @./porte2.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.5000000223517418, 1, 1.19)
                double3 xformOp:translate = (0.76, 0.10000000149011612, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "door_inside_handle_003" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Looks/Shiny_Metal> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "lock_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Looks/Shiny_Metal> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }
        }

        over "mesh_A4D35AD0C3E3A305"
        {
            token visibility = "inherited"
            double3 xformOp:rotateXYZ = (0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

            def Xform "Fridgebody" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./fridgebody.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_A4D35AD0C3E3A305/Fridgebody01> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Fridgedoor" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./fridgedoor.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_A4D35AD0C3E3A305/Fridgebody01> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Logo" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Looks/Shiny_Metal> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            def Material "Fridgebody01"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_A4D35AD0C3E3A305/Fridgebody01/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_A4D35AD0C3E3A305/Fridgebody01/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_A4D35AD0C3E3A305/Fridgebody01/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../texture/plastic/Plastic013B_2K-PNG_Color.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "ouais" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./fridgehandle.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_A4D35AD0C3E3A305/Fridgebody01> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_76BF7EC8C329BB1A"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Microwave" (
                prepend references = @./Microwave.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_76BF7EC8C329BB1A/Microwave01> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, -0, 90)
                double3 xformOp:scale = (0.017000000923871994, 0.017000000923871994, 0.017000000923871994)
                double3 xformOp:translate = (-3.0000000447034836, 2.400000035762787, -0.376)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Microwave01"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_76BF7EC8C329BB1A/Microwave01/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_76BF7EC8C329BB1A/Microwave01/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_76BF7EC8C329BB1A/Microwave01/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../texture/CJHouse/10122_Microwave_Oven_v1_Diffuse_SG.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        over "mesh_5C55C34A2DBD7792"
        {
            def Material "Lightwood"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../texture/CJHouse/Ivory002A_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                        hidden = false
                    )
                    asset inputs:height_texture = @../../texture/CJHouse/Ivory002A_height.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @../../texture/CJHouse/Ivory002A_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @../../texture/CJHouse/Ivory002A_rough.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "Kitchenwood"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../texture/wood/Wood048_albedo_light.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                        hidden = false
                    )
                    asset inputs:height_texture = @../../texture/wood/Wood048_height.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @../../texture/wood/Wood048_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @../../texture/wood/Wood048_rough.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Kitchencabinetset_Corner_R"
            {
                double3 xformOp:rotateXYZ = (0, 0, -90)
                double3 xformOp:scale = (1, 1.02, 1)
                double3 xformOp:translate = (-1.25, 3.5839625831133883, -1.490000000502846)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Body" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETBODYAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETDOORhandle.usd@
                )
                {
                    rel material:binding = </Looks/Shiny_Metal> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Top" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETTOPAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_88BF21F823995573/Darksteel> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Body_01" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETBODYAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (2.4486325855832547e-7, -0.841, 4.547473508864641e-13)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Top_01" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETTOPAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_88BF21F823995573/Darksteel> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, -0.841, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Door" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./kitchencabinetdoorvertAAAAAAA.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, -0.841, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Cabinetdoor_handle" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/Shiny_Metal> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }

                    over "Cabinetdoor" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "Kitchencabinetset_Corner_L"
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.15, -3.84, -1.49)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Body" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETBODYAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETDOORhandle.usd@
                )
                {
                    rel material:binding = </Looks/Shiny_Metal> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Top" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETTOPAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_88BF21F823995573/Darksteel> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Kitchencabinetset_L"
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1.12, 1)
                double3 xformOp:translate = (-3.46, -1.5000000223517418, -1.490000000502846)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Body" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETBODYAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETDOORhandle.usd@
                )
                {
                    rel material:binding = </Looks/Shiny_Metal> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Top" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETTOPAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_88BF21F823995573/Darksteel> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Top_01" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETTOPAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_88BF21F823995573/Darksteel> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (2.4712107915547676e-7, -0.835, 7.651124178664759e-11)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Top_02" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETTOPAAAAAA_flat.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_88BF21F823995573/Darksteel> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (2.4712107915547676e-7, -1.67, 7.651124178664759e-11)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Body_01" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETBODYAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, -0.841, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Body_02" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETBODYAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, -1.682, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Door" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./kitchencabinetdoorvertAAAAAAA.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-2.4712107915547676e-7, -0.841, -7.651124178664759e-11)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Cabinetdoor_handle" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/Shiny_Metal> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }

                    over "Cabinetdoor" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "Kitchencabinetset_R"
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1.08, 1)
                double3 xformOp:translate = (-3.46, 1.3, -1.490000000502846)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Body" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETBODYAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Handle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETDOORhandle.usd@
                )
                {
                    rel material:binding = </Looks/Shiny_Metal> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Top" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETTOPAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_88BF21F823995573/Darksteel> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Top_01" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETTOPAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_88BF21F823995573/Darksteel> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-2.4700102585484274e-7, 0.84, 3.7971403799019754e-11)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Body_01" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETBODYAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-2.608867362141609e-7, 0.841, 3.1604940886609256e-11)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Body_02" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETBODYAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-2.608867362141609e-7, 1.682, 3.1604940886609256e-11)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Top_02" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./KITCHENCABINETTOPAAAAAA_flat.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_88BF21F823995573/Darksteel> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-2.4700102585484274e-7, 1.682, 3.7971403799019754e-11)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Door" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = @./kitchencabinetdoorvertAAAAAAA.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (7.456183084286749e-7, 0.8399999999999999, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Cabinetdoor_handle" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/Shiny_Metal> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }

                    over "Cabinetdoor" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_131AB4D2A724A011"
        {
            def Xform "TOPCABINET" (
                delete references = @./kitchencabinet.usd@
                prepend references = @./kitchencabinetbody.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90.00000134110451, 0, 90.00000134110451)
                double3 xformOp:scale = (0.6000000089406967, 1.600000023841858, 0.5000000074505806)
                double3 xformOp:translate = (-3.400000050663948, -2.1000000312924385, 1.2000000178813934)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CUBezierCurve_022"
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            def Xform "TOPCABINET01" (
                delete references = @./kitchencabinet.usd@
                prepend references = @./kitchencabinetbody.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90.00000134110451, 0, 0)
                double3 xformOp:scale = (1.0000000149011612, 1.700000025331974, 0.61)
                double3 xformOp:translate = (-2.1000000312924385, 3.6000000536441803, 1.2000000178813934)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CUBezierCurve_022"
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            def Xform "handle" (
                prepend references = @./kitchencabinetHandle.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_94A0687761B5F008/Painted_White_Metal> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90.00000134110451, 0, 90.00000134110451)
                double3 xformOp:scale = (0.10000000149011612, 0.25, 0.10000000149011612)
                double3 xformOp:translate = (-2.8000000417232513, -2.125, 0.6000000089406967)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "handle_01" (
                prepend references = @./kitchencabinetHandle.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_94A0687761B5F008/Painted_White_Metal> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90.00000134110451, 0, 0)
                double3 xformOp:scale = (0.10000000149011612, 0.25, 0.10000000149011612)
                double3 xformOp:translate = (-2.15, 2.89, 0.6000000089406967)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "mETAL"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_131AB4D2A724A011/mETAL/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_131AB4D2A724A011/mETAL/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_131AB4D2A724A011/mETAL/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../texture/buildings/interiors/Metal042_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @../../texture/buildings/interiors/Metal042_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @../../texture/buildings/interiors/Metal042_rough.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_E30AB78471139FD8"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "KCurtain1" (
                prepend references = @./curtain1.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 0.800000011920929, 0.6000000238418579)
                double3 xformOp:translate = (-3.3700000000000006, -1.4000000208616257, 0.137)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "KCurtain2" (
                prepend references = @./curtain2.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 0.800000011920929, 0.6000000238418579)
                double3 xformOp:translate = (-3.3700000521540647, 2.2, 0.137)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Curtainhanger" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = @./curtainhanger.usd@
            )
            {
                rel material:binding = </Looks/Painted_White_Wood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1.149999976158142, 0.6000000238418579, 0.6000000238418579)
                double3 xformOp:translate = (-3.3700000000000006, 0.33, 0.135)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_88BF21F823995573"
        {
            def Material "Darksteel"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_88BF21F823995573/Darksteel/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_88BF21F823995573/Darksteel/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_88BF21F823995573/Darksteel/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../texture/CJHouse/Metal029_1K-PNG_Color.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                        hidden = false
                    )
                    asset inputs:height_texture = @../../texture/CJHouse/Metal029_1K-PNG_Displacement.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:metallic_texture = @../../texture/CJHouse/Metal029_1K-PNG_Metalness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @../../texture/CJHouse/Metal029_1K-PNG_NormalDX.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @../../texture/CJHouse/Metal029_1K-PNG_Roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Ovenfire" (
                prepend references = @./stovefire.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_88BF21F823995573/Darksteel> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Stove"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_88BF21F823995573/Stove/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_88BF21F823995573/Stove/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_88BF21F823995573/Stove/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../texture/CJHouse/stove_1001_baseColor.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:metallic_texture = @../../texture/CJHouse/stove_1001_metallicRoughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @../../texture/CJHouse/stove_1001_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:reflection_roughness_constant = 0.5 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Amount"
                        doc = """Higher roughness values lead to more blurry reflections

"""
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @../../texture/CJHouse/stove_1001_rough.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "OVEN" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = @./oven.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_88BF21F823995573/Stove> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_6F7120FFAB5B60AC"
        {
            def Xform "Doorkitchen" (
                prepend references = @./Doornohandle.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_6F7120FFAB5B60AC/Doorkitchen01> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, -90)
                double3 xformOp:scale = (2.1000000312924385, 1.2000000178813934, 1.42)
                double3 xformOp:translate = (4.700000070035458, 2.0000000298023224, -1.8000000268220901)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "lock_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Looks/Shiny_Metal> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "door_inside_handle_003" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Looks/Shiny_Metal> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            def Material "Doorkitchen01"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_6F7120FFAB5B60AC/Doorkitchen01/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_6F7120FFAB5B60AC/Doorkitchen01/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_6F7120FFAB5B60AC/Doorkitchen01/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../texture/wood/Wood 04_diffuse.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @../../texture/wood/Wood 04_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @../../texture/wood/Wood 04_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_E77A2E60B2780D1F"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Buffetbody" (
                prepend references = @./buffet.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_E77A2E60B2780D1F/Buffettex> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0014, 0.0019, 0.0012)
                double3 xformOp:translate = (-3.7000000551342964, 1.0000000149011612, -2.39)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Buffettex"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_E77A2E60B2780D1F/Buffettex/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_E77A2E60B2780D1F/Buffettex/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_E77A2E60B2780D1F/Buffettex/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../texture/wood/Buffet_BaseColor.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                        hidden = false
                    )
                    asset inputs:height_texture = @../../texture/wood/Buffet_Displacement.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:metallic_texture = @../../texture/wood/Buffet_Metallic.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @../../texture/wood/Buffet_Roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Buffethandle" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./poignebuffet.usd@
            )
            {
                rel material:binding = </Looks/Shiny_Metal> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, -90)
                double3 xformOp:scale = (0.0014, 0.0014, 0.0012)
                double3 xformOp:translate = (-3.1000000461935997, 1.0000000149011612, -2.37)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_9B3132ED34651E7C"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Plant" (
                prepend references = @./tallplant2.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_9B3132ED34651E7C/leaves> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.6000000089406967, 0.6000000089406967, 0.6000000089406967)
                double3 xformOp:translate = (-3.400000050663948, -6.800000101327896, -1.44)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Plant_01" (
                prepend references = @./tallplant2.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_9B3132ED34651E7C/leaves> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.6000000089406967, 0.6000000089406967, 0.6000000089406967)
                double3 xformOp:translate = (-8.200000122189522, -14.500000216066837, -1.44)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "leaves"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_9B3132ED34651E7C/leaves/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_9B3132ED34651E7C/leaves/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_9B3132ED34651E7C/leaves/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../texture/CJHouse/Leaves.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        over "mesh_3FA2AB33729CF181"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Pot" (
                prepend references = @./tallplant.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-3.400000050663948, -6.800000101327896, -2.400000035762787)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Pot_01" (
                prepend references = @./tallplant.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-8.200000122189522, -14.500000216066837, -2.400000035762787)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_EA42B233935CCAF8"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "plate" (
                prepend references = @./plate.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.9000000283122063, 1.9000000283122063, 1.9000000283122063)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_C59138A2CEACF63A"
        {
            def Xform "Littlespoon" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./littlespoon.usd@
            )
            {
                rel material:binding = </Looks/Stainless_Steel> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 32.9000004902482)
                double3 xformOp:scale = (1.6, 1.6, 1.6)
                double3 xformOp:translate = (-0.05, 0.05, 0.01)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Littlespoon_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./littlespoon.usd@
            )
            {
                rel material:binding = </Looks/Stainless_Steel> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (-72.6000010818243, 0, 32.9000004902482)
                double3 xformOp:scale = (1.6, 1.6, 1.6)
                double3 xformOp:translate = (-0.10000000149011612, -0.10000000149011612, 0.10000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_5547B0CACF77578A"
        {
            def Xform "Cup" (
                prepend references = @./cup.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.600000023841858, 1.600000023841858, 1.600000023841858)
                double3 xformOp:translate = (0.06, 0.01, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Cup_01" (
                prepend references = @./cup.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.600000023841858, 1.600000023841858, 1.600000023841858)
                double3 xformOp:translate = (-0.05, -0.05, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Cup_02" (
                prepend references = @./cup.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 20, 37.500000558793545)
                double3 xformOp:scale = (1.600000023841858, 1.600000023841858, 1.600000023841858)
                double3 xformOp:translate = (-0.059, -0.063, 0.05)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_C00E7488150794F8"
        {
            def Material "Leather"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_C00E7488150794F8/Leather/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_C00E7488150794F8/Leather/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_C00E7488150794F8/Leather/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../texture/leather/Leather014_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                        hidden = false
                    )
                    asset inputs:height_texture = @../../texture/leather/Leather014_height.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @../../texture/leather/Leather014_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @../../texture/leather/Leather014_rough.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Couchfeet" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = @./couchfeetCC0.usd@
            )
            {
                rel material:binding = </Looks/Shiny_Metal> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 5.4)
                double3 xformOp:scale = (1.3000000193715096, 1.3000000193715096, 1.3000000193715096)
                double3 xformOp:translate = (-7.700000114738941, -1.9000000283122063, -2.400000035762787)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Couch" (
                references = @./couchCC0.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_C00E7488150794F8/Leather> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 185.40000276267529)
                double3 xformOp:scale = (1.3000000193715096, 1.3000000193715096, 1.3000000193715096)
                double3 xformOp:translate = (-7.65, -1.9000000283122063, -2.42)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Couch_2"
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Legs" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Looks/Shiny_Metal> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "Armrest" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_C00E7488150794F8/couch_2> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "Sofa_base" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_C00E7488150794F8/couch_2> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "Seating_cushion" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_C00E7488150794F8/couch_2> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "Backrest_cushion" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_C00E7488150794F8/couch_2> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "Decoration_pillow" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_C00E7488150794F8/couch_2> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            def Material "couch_2"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_C00E7488150794F8/couch_2/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_C00E7488150794F8/couch_2/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_C00E7488150794F8/couch_2/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../texture/CJHouse/couch_02_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                        hidden = false
                    )
                    asset inputs:height_texture = @@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @../../texture/CJHouse/couch_02_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @../../texture/CJHouse/couch_02_rough.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        over "mesh_22CACE9787613EA6"
        {
            token visibility = "inherited"

            def Xform "Curtainleft" (
                prepend references = @./curtain1.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 0.9000000357627869, 1)
                double3 xformOp:translate = (-2.9000000432133675, 5.424, 0.6)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CURTAIN_2_007"
                {
                    over "Plane_019"
                    {
                        rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                over "Plane_019"
                {
                    over "Plane_019"
                    {
                        rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "Curtainright" (
                prepend references = @./curtain2.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 0.9000000357627869, 1)
                double3 xformOp:translate = (0.37000000596046445, 5.424, 0.6)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CURTAIN_2_008"
                {
                    over "Plane_020"
                    {
                        rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            over "mesh" (
                active = false
            )
            {
            }

            def Material "fabric"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_22CACE9787613EA6/fabric/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_22CACE9787613EA6/fabric/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_22CACE9787613EA6/fabric/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../texture/fabric/fabric 01_baseColor.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @../../texture/fabric/fabric 01_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @../../texture/fabric/fabric 01_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Curatinhang" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./curtainhanger.usd@
            )
            {
                rel material:binding = </Looks/Painted_White_Wood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1.33, 5.425000000000001, 0.6000000089406967)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Curtainleft_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./curtain1.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1.3000000715255737, 1, 1)
                double3 xformOp:translate = (-3.46, -5.200000077486038, 4.33)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CURTAIN_2_007"
                {
                    over "Plane_019"
                    {
                        rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                over "Plane_019"
                {
                    over "Plane_019"
                    {
                        rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "Curtainright_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./curtain2.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1.3000000715255737, 1, 1)
                double3 xformOp:translate = (-3.46, -1.700000025331974, 4.33)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CURTAIN_2_008"
                {
                    over "Plane_020"
                    {
                        rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                over "Plane_020"
                {
                    over "Plane_020"
                    {
                        rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "Curatinhang_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./curtainhanger.usd@
            )
            {
                rel material:binding = </Looks/Painted_White_Wood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1.100000023841858, 1, 1)
                double3 xformOp:translate = (-3.46, -3.6000000536441803, 4.33)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_372B05755278B619"
        {
            def Xform "SINK" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./sink.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Cabient" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "Sink" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Looks/Stainless_Steel> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "Top" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_88BF21F823995573/Darksteel> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_CB0AA79E6A119372"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Door" (
                prepend references = @./Doornohandle.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_6F7120FFAB5B60AC/Doorkitchen01> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.700000025331974, 2.0000000298023224, 1.2000000178813934)
                double3 xformOp:translate = (0.800000011920929, 0.10000000149011612, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "lock_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Looks/Shiny_Metal> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "door_inside_handle_003" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Looks/Shiny_Metal> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }
        }

        over "mesh_8726C81963AFA0FD"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Sinkcurtain" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./curtain1.usd@
            )
            {
                rel material:binding = </Looks/Kitchen_Curtain> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 90.00000134110451)
                double3 xformOp:scale = (2.7000000402331352, 0.7000000104308128, 0.6000000089406967)
                double3 xformOp:translate = (-2.500000037252903, -1.9000000283122063, -1.600000023841858)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_C74582CCC5262CAC"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Plantpot" (
                prepend references = @./tallplant.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 0.5000000074505806)
                double3 xformOp:translate = (0.06, -0.10000000149011612, -0.47)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Cylinder_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                }
            }
        }

        over "mesh_13C7A903B959D052"
        {
            def Xform "Plant" (
                prepend references = @./tallplant2.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.30000000447034836, 0.30000000447034836, 0.30000000447034836)
                double3 xformOp:translate = (0.05, -0.10000000149011612, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Circle"
                {
                    over "Circle_001"
                    {
                        rel material:binding = </RootNode/meshes/mesh_9B3132ED34651E7C/leaves> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_1D77CCD2E143C480"
        {
            token visibility = "inherited"

            def Material "Darkwood"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_1D77CCD2E143C480/Darkwood/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_1D77CCD2E143C480/Darkwood/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_1D77CCD2E143C480/Darkwood/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../texture/wood/Wood066_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                        hidden = false
                    )
                    asset inputs:height_texture = @../../texture/wood/Wood066_height.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @../../texture/wood/Wood066_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @../../texture/wood/Wood066_rough.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Bedsidebodydark" (
                prepend references = @./bedsitedark.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_1D77CCD2E143C480/Darkwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (2.500000037252903, 2.0000000298023224, 2.0000000298023224)
                double3 xformOp:translate = (0, 1.2000000178813934, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Bedsidedoorlight" (
                prepend references = @./bedsitelight.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (2.500000037252903, 2.0000000298023224, 2.0000000298023224)
                double3 xformOp:translate = (0, 1.2000000178813934, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_96A5A8BA8494AB88"
        {
            token visibility = "inherited"

            over "mesh" (
                active = false
            )
            {
            }

            def Xform "BedsideRdark" (
                prepend references = @./bedsitedark.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_1D77CCD2E143C480/Darkwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.700000025331974, 1.700000025331974, 1.700000025331974)
                double3 xformOp:translate = (0, 1.1000000163912773, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "bedsideRlight" (
                prepend references = @./bedsitelight.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.700000025331974, 1.700000025331974, 1.700000025331974)
                double3 xformOp:translate = (0, 1.1000000163912773, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_A75B2A6F58DC05BD"
        {
            token visibility = "inherited"

            def Xform "Bedwood" (
                prepend references = @./bedwood.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_1D77CCD2E143C480/Darkwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90.00000134110451, 0, 0)
                double3 xformOp:scale = (0.0106, 0.015, 0.012)
                double3 xformOp:translate = (0.423, 2.400000035762787, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_69C16D49E8B6B8AB"
        {
            def Xform "Blanket" (
                prepend references = @./bedblanket.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_69C16D49E8B6B8AB/blanket> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90.00000134110451, 0, 0)
                double3 xformOp:scale = (0.0106, 0.013, 0.012)
                double3 xformOp:translate = (0.423, 2.35, 0.04)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "blanket"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_69C16D49E8B6B8AB/blanket/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_69C16D49E8B6B8AB/blanket/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_69C16D49E8B6B8AB/blanket/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../texture/fabric/Fabric053_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                        hidden = false
                    )
                    asset inputs:height_texture = @../../texture/fabric/Fabric053_height.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @../../texture/fabric/Fabric053_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @../../texture/fabric/Fabric053_rough.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_66BBFFD57CBBBE0D"
        {
            def Xform "Cans" (
                prepend references = @./cans.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, -0, -69.5999984741211)
                double3 xformOp:scale = (2.5, 2.5, 2.9000000953674316)
                double3 xformOp:translate = (-0.20000000298023224, 0.10000000149011612, 0.010000000000000002)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Cans_01" (
                prepend references = @./cans.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, -0, -69.5999984741211)
                double3 xformOp:scale = (2.5, 2.5, 2.9000000953674316)
                double3 xformOp:translate = (0.10000000149011612, 0.20000000298023224, 0.010000000000000002)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Cans_02" (
                prepend references = @./cans.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, -0, -69.5999984741211)
                double3 xformOp:scale = (2.5, 2.5, 2.9000000953674316)
                double3 xformOp:translate = (-0.10000000149011612, 0.20000000298023224, 0.010000000000000002)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_556F1242C15C1E3A"
        {
            token visibility = "inherited"

            def Material "beer"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_556F1242C15C1E3A/beer/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_556F1242C15C1E3A/beer/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_556F1242C15C1E3A/beer/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Translucent.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                    float inputs:ior_constant = 2.01 (
                        customData = {
                            float default = 1.3
                            dictionary range = {
                                float max = 3
                                float min = 1
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Index of Refraction"
                        doc = """Index of Refraction of the material

"""
                        hidden = false
                    )
                    bool inputs:thin_walled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Specular"
                        displayName = "Thin-walled"
                        doc = """Whether the material is thin-walled

"""
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "Beer_label"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_556F1242C15C1E3A/Beer_label/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_556F1242C15C1E3A/Beer_label/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_556F1242C15C1E3A/Beer_label/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../texture/CJHouse/Crown-extra-beer-Label.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "Beerliquid"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_556F1242C15C1E3A/Beerliquid/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_556F1242C15C1E3A/Beerliquid/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_556F1242C15C1E3A/Beerliquid/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Translucent.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                    float inputs:ior_constant = 1.36 (
                        customData = {
                            float default = 1.3
                            dictionary range = {
                                float max = 3
                                float min = 1
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Index of Refraction"
                        doc = """Index of Refraction of the material

"""
                        hidden = false
                    )
                    color3f inputs:transmittance_color = (0.35521233, 0.25141427, 0.13303319) (
                        customData = {
                            float3 default = (0.97, 0.97, 0.97)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Volume"
                        displayName = "Transmittance Color"
                        doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                        hidden = false
                        renderType = "color"
                    )
                    asset inputs:transmittance_texture = @@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Volume"
                        displayName = "Transmittance Color/Diffuse Albedo Texture"
                        doc = """Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer

"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Beer_Bottle"
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Bottle" (
                    prepend references = @./Beerbottle.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_556F1242C15C1E3A/beer> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Liquid" (
                    prepend references = @./beerliquid.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_556F1242C15C1E3A/Beerliquid> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Label_beer" (
                    prepend references = @./Beerlabel.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_556F1242C15C1E3A/Beer_label> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    token visibility = "inherited"
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_99CC106F457F1BD4"
        {
            token visibility = "inherited"

            def Xform "JDBottle" (
                prepend references = @./JDBottle.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_99CC106F457F1BD4/Glass> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.06, 0.06, 0.12)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                double3 xformOp:translate = (0, 0, 0.126)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "JDLogo" (
                prepend references = @./JDLogo.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_99CC106F457F1BD4/JDlogo> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.06, 0.06, 0.12)
                double3 xformOp:translate = (0, 0, 0.126)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }

            def Material "Glass"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_99CC106F457F1BD4/Glass/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_99CC106F457F1BD4/Glass/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_99CC106F457F1BD4/Glass/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Translucent.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                    bool inputs:enable_emission = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Emissive"
                        displayName = "Enable Emission"
                        doc = "Enables the emission of light from the material"
                        hidden = false
                    )
                    float inputs:ior_constant = 1.3 (
                        customData = {
                            float default = 1.3
                            dictionary range = {
                                float max = 3
                                float min = 1
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Index of Refraction"
                        doc = "Index of Refraction of the material"
                        hidden = false
                    )
                    float inputs:thin_wall_thickness = 1 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 65504
                                float min = 0.001
                            }
                            dictionary soft_range = {
                                float max = 1
                                float min = 0.001
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Thin-walled material thickness"
                        doc = "Simulated thickness for thin-walled materials (0 disables thin-walled mode)"
                        hidden = false
                    )
                    bool inputs:thin_walled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Specular"
                        displayName = "Thin-walled"
                        doc = "Whether the material is thin-walled"
                        hidden = false
                    )
                    color3f inputs:transmittance_color = (0.97, 0.97, 0.97) (
                        customData = {
                            float3 default = (0.97, 0.97, 0.97)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Volume"
                        displayName = "Transmittance Color"
                        doc = "Expected transmittance after the specified transmittance distance through the volume."
                        hidden = false
                    )
                    bool inputs:use_diffuse_layer = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Volume"
                        displayName = "Use diffuse layer"
                        doc = "When set, simulates a diffuse layer on top of the material"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "JDlogo"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_99CC106F457F1BD4/JDlogo/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_99CC106F457F1BD4/JDlogo/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_99CC106F457F1BD4/JDlogo/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../texture/CJHouse/Jack_Daniels_Logo_03.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            over "JDLiquid01" (
                active = false
            )
            {
                double3 xformOp:translate = (0, 0, 0.126)
            }
        }

        over "mesh_B6B331A98CA26D51"
        {
            token visibility = "inherited"

            def Xform "JDLOGO2" (
                prepend references = @./JDLogo.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_99CC106F457F1BD4/JDlogo> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.07, 0.07, 0.12)
                double3 xformOp:translate = (0, 0, -0.013)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }

            def Xform "jd2" (
                prepend references = @./JDBottle.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_99CC106F457F1BD4/Glass> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.07, 0.07, 0.12)
                double3 xformOp:translate = (0, 0, -0.013)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_94179CA5E9B28A1E"
        {
            def Xform "Stairs" (
                prepend references = @./Stairs.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_94179CA5E9B28A1E/Woodstairs> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Woodstairs"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_94179CA5E9B28A1E/Woodstairs/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_94179CA5E9B28A1E/Woodstairs/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_94179CA5E9B28A1E/Woodstairs/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Base Color"
                        doc = """The base albedo color to use if no texture is specified

"""
                        hidden = false
                        renderType = "color"
                    )
                    asset inputs:diffuse_texture = @../../texture/wood/Wood051_2K-PNG_Color.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                        hidden = false
                    )
                    asset inputs:height_texture = @../../texture/wood/Wood051_2K-PNG_Displacement.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @../../texture/wood/Wood051_2K-PNG_NormalDX.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @../../texture/wood/Wood051_2K-PNG_Roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_DDE358953FAE5244"
        {
            custom int preserveOriginalDrawCall = 1

            over "mesh" (
                active = false
            )
            {
            }

            def Xform "ceiling" (
                delete references = @./ceiling_GF.usd@
                prepend references = @./ceiling.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Kitchen_Lamp" (
                delete references = @./rooflamp.usd@
                prepend references = @./rattan_pendant_light.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.3073873683665624, -10.615653042060103, 3.509886392420417)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Stair_Lamp" (
                delete references = @./rooflamp.usd@
                prepend references = @./rattan_pendant_light.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (5.533278120628893, -1.7919056236471533, 4.7083751952031445)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Corridor_Lamp_01" (
                delete references = @./rooflamp.usd@
                prepend references = @./rattan_pendant_light.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (4.5903219776632795, -8.38063610234235, 7.306766976443273)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Corridor_Lamp_02" (
                delete references = @./rooflamp.usd@
                prepend references = @./rattan_pendant_light.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1.8476393846563042, -8.38063610234235, 7.306766976443273)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Bedroom_Lamp" (
                delete references = @./rooflamp.usd@
                prepend references = @./rattan_pendant_light.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.546514163653228, -3.4982354639194, 7.306766976443273)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Livingroom_Pendantlight" (
                references = @./LivingRoom_Pendant.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (7.05, 1.66, 2.4)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "ChaningRoom_Light" (
                references = @./rattan_pendant_light bulb.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1.700000025331974, -11.700000174343586, 6.11)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_3A658330EBE4BD63"
        {
            token visibility = "inherited"

            def Xform "PLATE" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./plate.usd@
            )
            {
                rel material:binding = </Looks/White_Ceramics> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.01, -0.034, 0.1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "PLATE_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./plate.usd@
            )
            {
                rel material:binding = </Looks/White_Ceramics> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.01, -0.034, 0.09)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }

            def Xform "PLATE_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./plate.usd@
            )
            {
                rel material:binding = </Looks/White_Ceramics> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, -0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.01, -0.034, 0.08)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "PLATE_03" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./plate.usd@
            )
            {
                rel material:binding = </Looks/White_Ceramics> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.01, -0.034, 0.07)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "PLATE_04" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./plate.usd@
            )
            {
                rel material:binding = </Looks/White_Ceramics> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.01, -0.034, 0.05999999999999999)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "PLATE_05" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./plate.usd@
            )
            {
                rel material:binding = </Looks/White_Ceramics> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (-2.359999895095825, -0, 0)
                double3 xformOp:scale = (1.7000000476837158, 1.7000000476837158, 1.7000000476837158)
                double3 xformOp:translate = (-0.01, -0.03387696670988704, 0.051998486051748456)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "PLATE_06" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./plate.usd@
            )
            {
                rel material:binding = </Looks/White_Ceramics> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0.09000005573034286, 1.5399999618530273, 5.765673333225625e-16)
                double3 xformOp:scale = (1.7000000476837158, 1.7000000476837158, 1.7000000476837158)
                double3 xformOp:translate = (-0.029996388064270726, -0.034, 0.036268748336749694)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "PLATE_07" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./plate.usd@
            )
            {
                rel material:binding = </Looks/White_Ceramics> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (-0.9086025953292847, 1.0741461515426636, -16.00310707092285)
                double3 xformOp:scale = (1.7000000476837158, 1.7000000476837158, 1.7000000476837158)
                double3 xformOp:translate = (-0.019888046169584173, -0.02395051851267632, 0.029864106391560005)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "PLATE_08" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./plate.usd@
            )
            {
                rel material:binding = </Looks/White_Ceramics> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, -1.3600000143051147, 0)
                double3 xformOp:scale = (1.7000000476837158, 1.7000000476837158, 1.7000000476837158)
                double3 xformOp:translate = (-0.0000028169696922389353, -0.034, 0.014237342492036226)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "PLATE_09" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./plate.usd@
            )
            {
                rel material:binding = </Looks/White_Ceramics> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0.1300000697374344, -1.7299998998641968, 2.6782135706491118e-15)
                double3 xformOp:scale = (1.7000000476837158, 1.7000000476837158, 1.7000000476837158)
                double3 xformOp:translate = (0.009990883798925482, -0.034, 0.003603792131332101)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "PLATE_10" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./plate.usd@
            )
            {
                rel material:binding = </Looks/White_Ceramics> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.7000000476837158, 1.7000000476837158, 1.7000000476837158)
                double3 xformOp:translate = (-0.01, -0.034, -0.008000000000000002)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_F0EF9CBD2E176CB0"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "floor" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                delete references = @./Floore.usd@
                prepend references = @./Floor.usd@
            )
            {
                rel material:binding = </Looks/WoodenFloor> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_7376C1FC8EFBCD80"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_E29EA038080CED73"
        {
            def Xform "Xform_E29EA038080CED73_0" (
                prepend references = @./kitchen_floor.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_48DEE7753CFBC467"
        {
            def Xform "ceiling" (
                delete references = [
                    @./kitchen_wall_02.usd@,
                    @./beerliquid.usd@
                ]
                prepend references = @./kitchen_ceiling.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "kitchen_wall" (
                delete references = @./kitchen_wall_01.usd@
                prepend references = @./kitchen_wall.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_87CE831C617CFB4D"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Window_02" (
                delete references = @.Window_02.usda@
                prepend references = @./Window_02.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Border" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Looks/Painted_White_Wood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "Glass" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Looks/Windwo_Glass> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }
        }

        over "mesh_5DE209D6828DD7FE"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Window_01" (
                delete references = @.Window_01.usda@
                prepend references = @./Window_01.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Border" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Looks/Painted_White_Wood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "Glass" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Looks/Windwo_Glass> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }
        }

        over "mesh_B498133440D3CDEE"
        {
            custom int preserveOriginalDrawCall = 1

            def Xform "Mirror" (
                references = @../props/Saloon/Mirror.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, -90, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.400000035762787, 0.4, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_0CB18C2CAF976AED"
        {
            token visibility = "inherited"
            double3 xformOp:rotateXYZ = (0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Mattress" (
                prepend references = @./bedmattress.usd@
            )
            {
                double3 xformOp:rotateXYZ = (90.00000134110451, 0, 0)
                double3 xformOp:scale = (0.0106, 0.02, 0.012)
                double3 xformOp:translate = (0.423, 2.400000035762787, -0.30000000447034836)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_572B662C39410554"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_408FB786C12828B8"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_45AB9F89B8E35A91"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_D8A11B27B655A026"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_8015937B514196BD"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_2A25A11E773B8CCD"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_5EC9705CA10A1DF5"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_DA83465B73A329A4"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_56823E893C5DD59F"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_8A780C51AB2A62F6"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_5D8FB85D290F2DC7"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_D3D14B59CD93B374"
        {
            def Xform "Livingroom_Picture_Bridge" (
                references = @./photoframe.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.2, 1.3, 1)
                double3 xformOp:translate = (0, -0.32, -0.05)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Picture_01"
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_texture = @../../texture/CJHouse/Picture_Bridge.dds@ (
                            colorSpace = "auto"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Diffuse"
                            displayName = "Albedo Map"
                            doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                            hidden = false
                            renderType = "texture_2d"
                        )
                    }
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_28549AFDD68556E1"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_EA6C30F33C8F3468"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_07C6F4946660DD7C"
        {
            def Xform "Livingroom_Picture_Tree" (
                references = @./photoframe.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1.4, 1.4)
                double3 xformOp:translate = (0, -2.2000000327825546, -0.2)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Picture_01"
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_texture = @../../texture/CJHouse/Picture_Tree.dds@ (
                            colorSpace = "auto"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Diffuse"
                            displayName = "Albedo Map"
                            doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                            hidden = false
                            renderType = "texture_2d"
                        )
                    }
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_5488453906EB9EA9"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_AFA7E7AB6F7F3EEF"
        {
            def Xform "Livingroom_Picture_CJ" (
                references = @./photoframe.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 0.9, 1)
                double3 xformOp:translate = (0, -7.89, -0.12)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Picture_01"
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_texture = @../../texture/CJHouse/Picture_CJ.dds@ (
                            colorSpace = "auto"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Diffuse"
                            displayName = "Albedo Map"
                            doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                            hidden = false
                            renderType = "texture_2d"
                        )
                    }
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_FD8934704F73733F"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_6A77B6020B78E3E6"
        {
            def Xform "Livingroom_Picture_Family" (
                references = @./photoframe.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 0.7, 0.8)
                double3 xformOp:translate = (2.03, -10.09, 0.04)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Picture_01"
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_texture = @../../texture/CJHouse/Picture_Family.dds@ (
                            colorSpace = "auto"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Diffuse"
                            displayName = "Albedo Map"
                            doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                            hidden = false
                            renderType = "texture_2d"
                        )
                    }
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_F5A61CE05802338A"
        {
            def Xform "Livingroom_Picture_Woman" (
                references = @./photoframe.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 180)
                double3 xformOp:scale = (1, 0.7, 0.9)
                double3 xformOp:translate = (7.95, -1.72, -0.29)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Picture_01"
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_texture = @../../texture/CJHouse/Picture_Woman.dds@ (
                            colorSpace = "auto"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Diffuse"
                            displayName = "Albedo Map"
                            doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                            hidden = false
                            renderType = "texture_2d"
                        )
                    }
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_B20306D8EF88A2D6"
        {
            def Xform "Bedroom_Picture_Cat" (
                references = @./photoframe.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0.48, -0.1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Picture_01"
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_texture = @../../texture/CJHouse/Picture_Cat.dds@ (
                            colorSpace = "auto"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Diffuse"
                            displayName = "Albedo Map"
                            doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                            hidden = false
                            renderType = "texture_2d"
                        )
                    }
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_7642E8F510D6C8C9"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_28E64417C3966CD1"
        {
            def Xform "Bedroom_Picture_village" (
                references = @./photoframe.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -90)
                double3 xformOp:scale = (1, 1.3, 1)
                double3 xformOp:translate = (0, 0.5, 0.03)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Picture_01"
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_texture = @../../texture/CJHouse/Picture_village.dds@ (
                            colorSpace = "auto"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Diffuse"
                            displayName = "Albedo Map"
                            doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                            hidden = false
                            renderType = "texture_2d"
                        )
                    }
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_12F3744D12256292"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_A443AA9663212AE8"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_0354D445019FBC9E"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_190BB4FCED714317"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_CE7CF4279A060BC2"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_EBF138544E6BD027"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_332272FE166B2EE9"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Book" (
                references = @./Bedroom_Book_01.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.20000000298023224, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_9A9A169DDC5F94E3"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_DC69D0249AE12DB3"
        {
            def Xform "Book" (
                references = @./Bedroom_Book_02.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.4000000059604645, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_A6C00156BCA16714"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_8DCE8B32FEB9BF49"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_2A2A9250D892E994"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_C8C6FD78C0B5F7D9"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_4CDA2E8D01C0B02A"
        {
            def Xform "CJHouse_changingroom_Light_01" (
                references = @./changing_room_light_bulb.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.44, -0.52, 1.68)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Wire_001"
                {
                    over "Blub_Plug"
                    {
                        over "blub"
                        {
                            over "Blub_Body"
                            {
                                over "Point"
                                {
                                    over "SphereLight"
                                    {
                                        float inputs:colorTemperature = 6500
                                        bool inputs:enableColorTemperature = 0
                                        float inputs:intensity = 300
                                    }
                                }
                            }
                        }
                    }
                }
            }

            def Xform "CJHouse_changingroom_Light_02" (
                references = @./changing_room_light_bulb.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, -1.2722218874358041e-14, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.30000000447034836, 3.7000000551342964, 1.68)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Wire_001"
                {
                    over "Blub_Plug"
                    {
                        over "blub"
                        {
                            over "Blub_Body"
                            {
                                over "Point"
                                {
                                    over "SphereLight"
                                    {
                                        float inputs:colorTemperature = 6500
                                        bool inputs:enableColorTemperature = 0
                                        float inputs:intensity = 300
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        over "mesh_3DE4533B40330B5D"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_5AF3B0450B74B55B"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_3CA62344123B8D84"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_703A872BECB94D28"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_898CF16C05C9BD72"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_0137CC375C8492D0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_50EEBAAA8969AE98"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Bedroom_Picture_Flower" (
                prepend references = @./PhotoFrame.usda@
            )
            {
                custom bool IsRemixRef = 1
                double3 xformOp:rotateXYZ = (0, 0, -90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Picture_01"
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_texture = @../../texture/CJHouse/Picture_Flower.dds@ (
                            colorSpace = "auto"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Diffuse"
                            displayName = "Albedo Map"
                            doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                            hidden = false
                            renderType = "texture_2d"
                        )
                    }
                }
            }
        }

        over "mesh_2012F47FB0D79B53"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_74305433B8D492A8"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "carpet" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = @./carpet.usd@
            )
            {
                rel material:binding = </Looks/CJHouse_carpet> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }
    }

    over "Looks"
    {
        over "mat_9416A016D7DDD618"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/fabric/Fabric022_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                    hidden = false
                )
                asset inputs:height_texture = @../../texture/fabric/Fabric022_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/fabric/Fabric022_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/fabric/Fabric022_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_411542E0C644EC08"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/CJHouse/Wooden_table_02_diff_4k.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:metallic_texture = @../../texture/CJHouse/Wooden_table_02_metal_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/CJHouse/Wooden_table_02_nor_dx_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/CJHouse/Wooden_table_02_rough_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_7F005A1E1BC1CA8D" (
            active = true
        )
        {
            over "Shader" (
                active = true
            )
            {
                asset inputs:diffuse_texture = @../../texture/CJHouse/Wallpaper_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                    hidden = false
                )
                asset inputs:height_texture = @../../texture/CJHouse/Wallpaper_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/CJHouse/Wallpaper_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/CJHouse/Wallpaper_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_BCB53BBEE0A8897C"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/concrete/Concrete034_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:normalmap_texture = @../../texture/concrete/Concrete034_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/concrete/Concrete034_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_271089CB22BB0F6F"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/CJHouse/herringbone_parquet_diff_4k.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                    hidden = false
                )
                asset inputs:height_texture = @../../texture/CJHouse/herringbone_parquet_disp_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/CJHouse/herringbone_parquet_nor_dx_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/CJHouse/herringbone_parquet_rough_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_1A9A79A481BEEEB3"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/concrete/Concrete034_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @../../texture/concrete/Concrete034_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/concrete/Concrete034_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/concrete/Concrete034_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_8332E2C8765A6BA9"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/wood/Planks021_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                    hidden = false
                )
                asset inputs:height_texture = @../../texture/wood/Planks021_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/wood/Planks021_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/wood/Planks021_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_D9A4C29EB4CF0C8E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/CJHouse/Leaves.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                    hidden = false
                )
                asset inputs:height_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_CD99E5440F56B7CE"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/CJHouse/potted_plant_02_pot_diff_4k.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                    hidden = false
                )
                asset inputs:height_texture = @../../texture/CJHouse/potted_plant_02_pot_disp_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/CJHouse/potted_plant_02_pot_nor_dx_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/CJHouse/potted_plant_02_pot_rough_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_A32945DFAF434F6E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/floors/floor_tiles_08_diff_4k.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @../../texture/floors/floor_tiles_08_disp_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/floors/floor_tiles_08_nor_dx_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/floors/floor_tiles_08_rough_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_B804E0D4DCB9B449"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/concrete/Concrete034_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @../../texture/concrete/Concrete034_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/concrete/Concrete034_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/concrete/Concrete034_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_B0923DCA8204364D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/concrete/Concrete034_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @../../texture/concrete/Concrete034_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/concrete/Concrete034_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/concrete/Concrete034_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_61CEB3E9878DA700"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/concrete/Concrete034_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @../../texture/concrete/Concrete034_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/concrete/Concrete034_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/concrete/Concrete034_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_4E702141761F7B72"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/CJHouse/Television_01_diff_4k.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:metallic_texture = @../../texture/CJHouse/Television_01_metallic_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/CJHouse/Television_01_nor_dx_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/CJHouse/Television_01_roughness_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_2C240A0B7EB11C9A"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/CJHouse/door_diff.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/CJHouse/door_norm.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/CJHouse/door_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_D3C129AC4EA0B0C4"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/CJHouse/Woodkitchen_Color.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @../../texture/CJHouse/Woodkitchen_Displacement.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/CJHouse/Woodkitchen_NormalDX.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/CJHouse/Woodkitchen_Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_8BB3D517662C5808"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/fabric/fabric 01_baseColor.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/fabric/fabric 01_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/fabric/fabric 01_roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_9C4A179E43E11888"
        {
            over "Shader"
            {
                color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                    renderType = "color"
                )
                asset inputs:diffuse_texture = @../../texture/wood/Planks021_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @../../texture/wood/Planks021_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/wood/Planks021_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/wood/Planks021_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_FCC57EB346CB6484"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/CJHouse/Marble012_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @../../texture/CJHouse/Marble012_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/CJHouse/Marble012_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/CJHouse/Marble012_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_2001099F76C3C341"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/wood/Wood 04_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/wood/Wood 04_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/wood/Wood 04_roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_4C5B36E9141922AA"
        {
            over "Shader"
            {
                uniform bool enable_opacity = 1
                color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = """The base albedo color to use if no texture is specified

"""
                    hidden = false
                    renderType = "color"
                )
                asset inputs:diffuse_texture = @../../texture/CJHouse/Paint002_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = """Enables the emission of light from the material

"""
                    hidden = false
                )
                asset inputs:height_texture = @../../texture/CJHouse/Paint002_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../../texture/CJHouse/Paint002_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../../texture/CJHouse/Paint002_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_31D37B9D6141E5B3"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../../texture/CJHouse/Leaves.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }
    }
}

over "Looks"
{
    def Material "Painted_White_Wood"
    {
        token outputs:mdl:displacement.connect = </Looks/Painted_White_Wood/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Painted_White_Wood/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Painted_White_Wood/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @../../texture/wood/PaintedWood009A_white_albedo.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:displace_in = 0.01 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 255
                        float min = 0
                    }
                }
                displayGroup = "Displacement"
                displayName = "Inwards Displacement"
                doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                hidden = false
            )
            asset inputs:height_texture = @../../texture/wood/PaintedWood009A_height.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Displacement"
                displayName = "Height Map"
                doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:normalmap_texture = @../../texture/wood/PaintedWood009A_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:reflectionroughness_texture = @../../texture/wood/PaintedWood009A_rough.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Windwo_Glass"
    {
        token outputs:mdl:displacement.connect = </Looks/Windwo_Glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Windwo_Glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Windwo_Glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.5999999 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:transmittance_texture = @../../texture/windows/Fingerprints007_albedo.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color/Diffuse Albedo Texture"
                doc = """Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer

"""
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Kitchen_Curtain"
    {
        token outputs:mdl:displacement.connect = </Looks/Kitchen_Curtain/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Kitchen_Curtain/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Kitchen_Curtain/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.7321745, 0.9073359, 0.7470514) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Base Color"
                doc = """The base albedo color to use if no texture is specified

"""
                hidden = false
                renderType = "color"
            )
            asset inputs:diffuse_texture = @../../texture/fabric/Fabric070_albedo.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:displace_in = 0.01 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 255
                        float min = 0
                    }
                }
                displayGroup = "Displacement"
                displayName = "Inwards Displacement"
                doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                hidden = false
            )
            asset inputs:height_texture = @../../texture/fabric/Fabric070_height.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Displacement"
                displayName = "Height Map"
                doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:normalmap_texture = @../../texture/fabric/Fabric070_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0.099999994 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            asset inputs:reflectionroughness_texture = @@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Light_bulb_Glass"
    {
        token outputs:mdl:displacement.connect = </Looks/Light_bulb_Glass/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Light_bulb_Glass/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Light_bulb_Glass/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.5999999 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "WoodenFloor"
    {
        token outputs:mdl:displacement.connect = </Looks/WoodenFloor/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/WoodenFloor/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/WoodenFloor/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @../../texture/wood/Planks037A_albedo.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:displace_in = 0.02 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 255
                        float min = 0
                    }
                }
                displayGroup = "Displacement"
                displayName = "Inwards Displacement"
                doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                hidden = false
            )
            asset inputs:height_texture = @../../texture/wood/Planks039_height.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Displacement"
                displayName = "Height Map"
                doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:metallic_texture = @../../texture/wood/Planks037A_metal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Metallic Map"
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:normalmap_texture = @../../texture/wood/Planks037A_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:reflectionroughness_texture = @../../texture/wood/Planks037A_rough.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Leather_CJHouse_Single_Couch"
    {
        token outputs:mdl:displacement.connect = </Looks/Leather_CJHouse_Single_Couch/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Leather_CJHouse_Single_Couch/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Leather_CJHouse_Single_Couch/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @../../texture/leather/Chocofur_Leather_Simple_01_diff.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "CJHouse_carpet"
    {
        token outputs:mdl:displacement.connect = </Looks/CJHouse_carpet/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/CJHouse_carpet/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/CJHouse_carpet/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @../../texture/CJHouse/carpet_albedo.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:normalmap_texture = @../../texture/CJHouse/carpet_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:reflectionroughness_texture = @../../texture/CJHouse/carpet_rough.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }
}

