#usda 1.0
(
    upAxis = "Z"
)

over "RootNode"
{
    over "meshes"
    {
        over "mesh_94A0687761B5F008"
        {
            def Xform "Chair" (
                prepend references = @./meshes/CJHouse/chair.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_94A0687761B5F008/Metal> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 73.70000109821558)
                double3 xformOp:scale = (1.2000000178813934, 1.2000000178813934, 1.2000000178813934)
                double3 xformOp:translate = (-9.700000144541264, -4.400000065565109, -2.38)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Chair_01" (
                prepend references = @./meshes/CJHouse/chair.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_94A0687761B5F008/Metal> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 165.6000024676323)
                double3 xformOp:scale = (1.2000000178813934, 1.2000000178813934, 1.2000000178813934)
                double3 xformOp:translate = (-8.800000131130219, -6.500000096857548, -2.38)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Chair_02" (
                prepend references = @./meshes/CJHouse/chair.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_94A0687761B5F008/Metal> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 198.5000029578805)
                double3 xformOp:scale = (1.2000000178813934, 1.2000000178813934, 1.2000000178813934)
                double3 xformOp:translate = (-7.900000117719173, -6.500000096857548, -2.38)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Metal"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_94A0687761B5F008/Metal/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_94A0687761B5F008/Metal/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_94A0687761B5F008/Metal/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/Matal_solid_paint_white_Base Color.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                        hidden = false
                    )
                    asset inputs:height_texture = @@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                        hidden = false
                    )
                    asset inputs:metallic_texture = @./texture/CJHouse/Matal_solid_paint_white_Metallic.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Map"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./texture/CJHouse/Matal_solid_paint_white_Normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./texture/CJHouse/Matal_solid_paint_white_Roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_47B507E8DF408E3B"
        {
            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/CJHouse/wooden_table_02_4k.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 4.200000062584877)
                double3 xformOp:scale = (2.2000000327825546, 1.8000000268220901, 1.183)
                double3 xformOp:translate = (-8.400000125169754, -5.500000081956387, -2.500000037252903)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Xform_mesh_01" (
                prepend references = @./meshes/CJHouse/wooden_table_02_4k.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -103.0000015348196)
                double3 xformOp:scale = (1.700000025331974, 1.600000023841858, 0.7000000104308128)
                double3 xformOp:translate = (-8.100000120699406, 0.30000000447034836, -2.4)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Cube_003"
                {
                    double3 xformOp:rotateXYZ = (0, 0, 8.00000011920929)
                    double3 xformOp:scale = (1.03, 1, 1)
                    double3 xformOp:translate = (-0.09, 0.07, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_02" (
                prepend references = @./meshes/CJHouse/wooden_table_02_4k.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -90.10000134259462)
                double3 xformOp:scale = (2.8000000417232513, 2.1000000312924385, 1.2000000178813934)
                double3 xformOp:translate = (-7.900000117719173, -10.000000149011612, -2.500000037252903)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_8E63B7467C93F8E0"
        {
            def Xform "Armchaircc0" (
                prepend references = @./meshes/CJHouse/armchairCC0.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -91.00000135600567)
                double3 xformOp:scale = (1.1000000163912773, 1.1000000163912773, 1.1000000163912773)
                double3 xformOp:translate = (-5.900000087916851, -0.10000000149011612, -2.400000035762787)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Armchaircc0_2" (
                prepend references = @./meshes/CJHouse/armchairCC0.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -61.80000092089176)
                double3 xformOp:scale = (1.1000000163912773, 1.1000000163912773, 1.1000000163912773)
                double3 xformOp:translate = (-6.000000089406967, 1.4000000208616257, -2.400000035762787)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_A3D947A309A76631"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Plant" (
                prepend references = @./meshes/CJHouse/planttablecj.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_A3D947A309A76631/Plant01> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.0000000149011612, 1.0000000149011612, 0.6000000089406967)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Plant01"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_A3D947A309A76631/Plant01/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_A3D947A309A76631/Plant01/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_A3D947A309A76631/Plant01/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/potted_plant_02_leaves_diff_4k.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                        hidden = false
                    )
                    asset inputs:height_texture = @./texture/CJHouse/potted_plant_02_leaves_disp_4k.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./texture/CJHouse/potted_plant_02_leaves_nor_dx_4k.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./texture/CJHouse/potted_plant_02_leaves_rough_4k.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        over "mesh_02C24D2ABC64C34C"
        {
            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/CJHouse/planttablecj2.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, -0.30000000447034836)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_3810A0F543440BB2"
        {
            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/CJHouse/planttablecj3.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.0000000149011612, 0.91, 1.0000000149011612)
                double3 xformOp:translate = (-0.13, 0.125, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_0354D445019FBC9E"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_AD5459D6015AEB6A"
        {
            rel material:binding = </RootNode/Looks/mat_B804E0D4DCB9B449> (
                bindMaterialAs = "weakerThanDescendants"
            )

            def Xform "Xform_AD5459D6015AEB6A_0" (
                prepend references = @./meshes/CJHouse/fenetre.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/CJHouse/fenetre.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_87D43D95E2722E5B"
        {
        }

        over "mesh_C55E311692B328E5"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "TV" (
                prepend references = @./meshes/CJHouse/Television_01_4k.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 34.50000051409006)
                double3 xformOp:scale = (1.4000000208616257, 1.4000000208616257, 1.4000000208616257)
                double3 xformOp:translate = (-9.900000147521496, 3.1000000461935997, -1.85)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_2532EE892B3E6065"
        {
            def Xform "Front_door" (
                prepend references = @./meshes/CJHouse/porte2.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.66, 1.2, 1.22)
                double3 xformOp:translate = (0.76, 0.10000000149011612, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_A4D35AD0C3E3A305"
        {
            double3 xformOp:rotateXYZ = (0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

            over "mesh" (
                active = false
            )
            {
                token visibility = "invisible"
            }

            def Xform "Fridgebody" (
                prepend references = @./meshes/CJHouse/fridgebody.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -180.00000268220901)
                double3 xformOp:scale = (0.0093, 0.012, 0.035)
                double3 xformOp:translate = (-0.76, 2.8000000417232513, -1.5000000223517418)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Cylinder_007"
                {
                    rel material:binding = </RootNode/meshes/mesh_A4D35AD0C3E3A305/Fridgebody01> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            def Xform "Fridgedoor" (
                prepend references = @./meshes/CJHouse/fridgedoor.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 180, 0)
                double3 xformOp:scale = (0.47, 0.4000000059604645, 1)
                double3 xformOp:translate = (-0.4000000059604645, 3.0000000447034836, -0.48)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Cube_001"
                {
                    rel material:binding = </RootNode/meshes/mesh_A4D35AD0C3E3A305/Fridgebody01> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            def Material "Fridgebody01"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_A4D35AD0C3E3A305/Fridgebody01/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_A4D35AD0C3E3A305/Fridgebody01/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_A4D35AD0C3E3A305/Fridgebody01/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/Plastic013B_2K-PNG_Color.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "ouais" (
                prepend references = @./meshes/CJHouse/fridgehandle.usd@
            )
            {
                double3 xformOp:rotateXYZ = (-90.00000134110451, 0, 0)
                double3 xformOp:scale = (0.06, 0.06, 0.06)
                double3 xformOp:translate = (-1.3000000193715096, 1.785, 0.5000000074505806)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Meshes_002"
                {
                    over "Sketchfab_model_002"
                    {
                        over "_ea9ee42aa484ed9801c0fad2e1db37c_fbx_002"
                        {
                            over "RootNode_002"
                            {
                                over "DoorHandle3_002"
                                {
                                    over "DoorHandle3_DoorHandle3_0_001"
                                    {
                                        over "DoorHandle3_DoorHandle3_0_002"
                                        {
                                            rel material:binding = </RootNode/meshes/mesh_94A0687761B5F008/Metal> (
                                                bindMaterialAs = "weakerThanDescendants"
                                            )
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        over "mesh_76BF7EC8C329BB1A"
        {
            over "mesh"
            {
            }

            def Xform "Microwave" (
                prepend references = @./meshes/CJHouse/Microwave.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_76BF7EC8C329BB1A/Microwave01> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 90.00000134110451)
                double3 xformOp:scale = (0.017, 0.017, 0.017)
                double3 xformOp:translate = (-3.0000000447034836, 2.400000035762787, -0.34)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Microwave01"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_76BF7EC8C329BB1A/Microwave01/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_76BF7EC8C329BB1A/Microwave01/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_76BF7EC8C329BB1A/Microwave01/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/10122_Microwave_Oven_v1_Diffuse_SG.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        over "mesh_5C55C34A2DBD7792"
        {
            def Material "Lightwood"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/Ivory002A_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                        hidden = false
                    )
                    asset inputs:height_texture = @./texture/CJHouse/Ivory002A_height.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./texture/CJHouse/Ivory002A_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./texture/CJHouse/Ivory002A_rough.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Scope "Kitchencabinet"
            {
                def Xform "Kitchacabinetbody" (
                    prepend references = @./meshes/CJHouse/KITCHENCABINETBODYAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (90.00000134110451, 0, 90.00000134110451)
                    double3 xformOp:scale = (0.0156, 0.0156, 0.016)
                    double3 xformOp:translate = (-3.03, 1.29, -1.700000025331974)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "kitchencabinettop" (
                    prepend references = @./meshes/CJHouse/KITCHENCABINETTOPAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/instances/inst_88BF21F823995573_0/Darksteel> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (90.00000134110451, 0, 90.00000134110451)
                    double3 xformOp:scale = (0.05, 0.015, 0.016)
                    matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, 7.549790126404332e-8, 1, 0), (0, -1, 7.549790126404332e-8, 0), (-92.6545181274414, 43.25218200683594, -16.37329864501953, 1) )
                    double3 xformOp:translate = (-3, 2.3000000342726707, -1.67)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "GC_25H_25H_50H_001_Cube_002"
                    {
                        rel material:binding = </RootNode/meshes/mesh_88BF21F823995573/Darksteel> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                def Xform "Door" (
                    prepend references = @./meshes/CJHouse/Kitchencabinetdoor.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (90.00000134110451, 0, 90.00000134110451)
                    double3 xformOp:scale = (0.800000011920929, 0.800000011920929, 0.800000011920929)
                    double3 xformOp:translate = (-2.97, 1.3000000193715096, -1.600000023841858)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Handle" (
                    prepend references = @./meshes/CJHouse/KITCHENCABINETDOORhandle.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_94A0687761B5F008/Metal> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 90.00000134110451)
                    double3 xformOp:scale = (0.800000011920929, 0.800000011920929, 0.800000011920929)
                    double3 xformOp:translate = (-1.8, 1.4000000208616257, -1.2000000178813934)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Scope "Kitchencabinet_01"
            {
                def Xform "Kitchacabinetbody" (
                    prepend references = @./meshes/CJHouse/KITCHENCABINETBODYAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (90.00000134110451, 0, 90.00000134110451)
                    double3 xformOp:scale = (0.0158, 0.0156, 0.016)
                    double3 xformOp:translate = (-3.03, -1.5000000223517418, -1.700000025331974)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "kitchencabinetdoor" (
                    prepend references = @./meshes/CJHouse/KITCHENCABINETDOORAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_FD8934704F73733F/Wood_04> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (90.00000134110451, 0, 90.00000134110451)
                    double3 xformOp:scale = (0.015, 0.015, 0.015)
                    double3 xformOp:translate = (-3, -1.5000000223517418, -1.67)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "GC_25H_25H_50H_001_Cube_001"
                    {
                        rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                def Xform "kitchencabinettop" (
                    prepend references = @./meshes/CJHouse/KITCHENCABINETTOPAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/instances/inst_88BF21F823995573_0/Darksteel> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (90.00000134110451, 0, 90.00000134110451)
                    double3 xformOp:scale = (0.065, 0.015, 0.016)
                    double3 xformOp:translate = (-3, -2.06, -1.67)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "GC_25H_25H_50H_001_Cube_002"
                    {
                        rel material:binding = </RootNode/meshes/mesh_88BF21F823995573/Darksteel> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                def Xform "Kitchacabinetbody_01" (
                    prepend references = @./meshes/CJHouse/KITCHENCABINETBODYAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (90.00000134110451, 0, -90.00000134110451)
                    double3 xformOp:scale = (0.0158, 0.0156, 0.016)
                    double3 xformOp:translate = (-3.03, -0.6000000089406967, -1.700000025331974)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Door_01" (
                    prepend references = @./meshes/CJHouse/Kitchencabinetdoor.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (90.00000134110451, 0, 90.00000134110451)
                    double3 xformOp:scale = (0.800000011920929, 0.800000011920929, 0.800000011920929)
                    double3 xformOp:translate = (-2.97, -1.5000000223517418, -1.600000023841858)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Handle_01" (
                    prepend references = @./meshes/CJHouse/KITCHENCABINETDOORhandle.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_94A0687761B5F008/Metal> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 90.00000134110451)
                    double3 xformOp:scale = (0.800000011920929, 0.800000011920929, 0.800000011920929)
                    double3 xformOp:translate = (-1.8, -1.4000000208616257, -1.2000000178813934)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Scope "Kitchencabinet_02"
            {
                def Xform "Kitchacabinetbody" (
                    prepend references = @./meshes/CJHouse/KITCHENCABINETBODYAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (90.00000134110451, 0, 180)
                    double3 xformOp:scale = (0.0158, 0.0156, 0.016)
                    double3 xformOp:translate = (-2.2000000327825546, -3.400000050663948, -1.700000025331974)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "kitchencabinettop" (
                    prepend references = @./meshes/CJHouse/KITCHENCABINETTOPAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/instances/inst_88BF21F823995573_0/Darksteel> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (90.00000134110451, 0, 180)
                    double3 xformOp:scale = (0.0159, 0.015, 0.0166)
                    double3 xformOp:translate = (-2.2000000327825546, -3.400000050663948, -1.67)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "GC_25H_25H_50H_001_Cube_002"
                    {
                        rel material:binding = </RootNode/meshes/mesh_88BF21F823995573/Darksteel> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                def Xform "Door_02" (
                    prepend references = @./meshes/CJHouse/Kitchencabinetdoor.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (90.00000134110451, 0, 180)
                    double3 xformOp:scale = (0.800000011920929, 0.800000011920929, 0.800000011920929)
                    double3 xformOp:translate = (-2.1000000312924385, -3.300000049173832, -1.600000023841858)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Handle_02" (
                    prepend references = @./meshes/CJHouse/KITCHENCABINETDOORhandle.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_94A0687761B5F008/Metal> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 180)
                    double3 xformOp:scale = (0.800000011920929, 0.800000011920929, 0.800000011920929)
                    double3 xformOp:translate = (-2.2000000327825546, -2.12, -1.2000000178813934)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Scope "Kitchencabinet_03"
            {
                def Xform "Kitchacabinetbody" (
                    prepend references = @./meshes/CJHouse/KITCHENCABINETBODYAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (90.00000134110451, 0, 0)
                    double3 xformOp:scale = (0.015, 0.015, 0.018)
                    double3 xformOp:translate = (-1.3000000193715096, 3.200000047683716, -1.700000025331974)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "kitchencabinettop" (
                    prepend references = @./meshes/CJHouse/KITCHENCABINETTOPAAAAAA.usd@
                )
                {
                    rel material:binding = </RootNode/instances/inst_88BF21F823995573_0/Darksteel> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (90.00000134110451, 0, 0)
                    double3 xformOp:scale = (0.031, 0.015, 0.019)
                    double3 xformOp:translate = (-1.8000000268220901, 3.200000047683716, -1.67)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "GC_25H_25H_50H_001_Cube_002"
                    {
                        rel material:binding = </RootNode/meshes/mesh_88BF21F823995573/Darksteel> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                def Xform "Door_03" (
                    prepend references = @./meshes/CJHouse/Kitchencabinetdoor.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (90.00000134110451, 0, 0)
                    double3 xformOp:scale = (0.800000011920929, 0.800000011920929, 0.800000011920929)
                    double3 xformOp:translate = (-1.3000000193715096, 3.0000000447034836, -1.600000023841858)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Handle_03" (
                    prepend references = @./meshes/CJHouse/KITCHENCABINETDOORhandle.usd@
                )
                {
                    rel material:binding = </RootNode/meshes/mesh_94A0687761B5F008/Metal> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (0.800000011920929, 0.800000011920929, 0.800000011920929)
                    double3 xformOp:translate = (-1.2000000178813934, 1.82, -1.2000000178813934)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Kitchacabinetbody_01" (
                prepend references = @./meshes/CJHouse/KITCHENCABINETBODYAAAAAA.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90.00000134110451, 0, -90.00000134110451)
                double3 xformOp:scale = (0.032, 0.0156, 0.016)
                double3 xformOp:translate = (-3.03, -2.9000000432133675, -1.700000025331974)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Kitchacabinetbody_2" (
                active = false
                prepend references = @./meshes/CJHouse/KITCHENCABINETBODYAAAAAA.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90, 6.04305356297942e-14, -90)
                double3 xformOp:scale = (0.015600000508129597, 0.015599999576807022, 0.01600000075995922)
                double3 xformOp:translate = (-3.0299999999999994, 0.35, -2.2000000327825546)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Kitchacabinetbody_03" (
                prepend references = @./meshes/CJHouse/KITCHENCABINETBODYAAAAAA.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90, 6.04305356297942e-14, -90)
                double3 xformOp:scale = (0.032, 0.015599999576807022, 0.01600000075995922)
                double3 xformOp:translate = (-3.0299999999999994, 2.7000000402331352, -1.700000025331974)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "GC_25H_25H_50H_001_Cube_327"
                {
                    rel material:binding = None

                    over "counterBorder" (
                        active = true
                    )
                    {
                    }

                    over "counter" (
                        active = true
                    )
                    {
                    }

                    over "cabinetDoor" (
                        active = true
                    )
                    {
                    }

                    over "cabinetDoorBorder" (
                        active = true
                    )
                    {
                    }

                    over "cabinetBaseboard" (
                        active = true
                    )
                    {
                    }
                }
            }

            def Xform "Kitchacabinetbody_04" (
                prepend references = @./meshes/CJHouse/KITCHENCABINETBODYAAAAAA.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (90, 6.04305356297942e-14, 180.00000268220901)
                double3 xformOp:scale = (0.0156, 0.015599999576807022, 0.01600000075995922)
                double3 xformOp:translate = (-2.2000000327825546, 3.200000047683716, -1.700000025331974)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Kitchacabinetbody_04" (
                prepend references = @./meshes/CJHouse/KITCHENCABINETBODYAAAAAA.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90, 6.04305356297942e-14, 180.00000268220901)
                double3 xformOp:scale = (0.0156, 0.015599999576807022, 0.01600000075995922)
                double3 xformOp:translate = (-2.2000000327825546, 3.200000047683716, -1.700000025331974)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Kitchenwood"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/PaintedWood006B_2K-PNG_Color.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                        hidden = false
                    )
                    asset inputs:height_texture = @./texture/CJHouse/PaintedWood006B_2K-PNG_Displacement.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./texture/CJHouse/PaintedWood006B_2K-PNG_NormalDX.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./texture/CJHouse/PaintedWood006B_2K-PNG_Roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        over "mesh_131AB4D2A724A011"
        {
            token visibility = "inherited"

            def Xform "TOPCABINET" (
                delete references = @./meshes/CJHouse/kitchencabinet.usd@
                prepend references = @./meshes/CJHouse/kitchencabinetbody.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (90.00000134110451, 0, 90.00000134110451)
                double3 xformOp:scale = (0.6000000089406967, 1.600000023841858, 0.5000000074505806)
                double3 xformOp:translate = (-3.400000050663948, -2.1000000312924385, 1.2000000178813934)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CUBezierCurve_022"
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            def Xform "TOPCABINET01" (
                delete references = @./meshes/CJHouse/kitchencabinet.usd@
                prepend references = @./meshes/CJHouse/kitchencabinetbody.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (90.00000134110451, 0, 0)
                double3 xformOp:scale = (1.0000000149011612, 1.700000025331974, 0.61)
                double3 xformOp:translate = (-2.1000000312924385, 3.6000000536441803, 1.2000000178813934)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CUBezierCurve_022"
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "mesh"
            {
                token visibility = "invisible"
            }

            def Xform "handle" (
                prepend references = @./meshes/CJHouse/kitchencabinetHandle.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_94A0687761B5F008/Metal> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90.00000134110451, 0, 90.00000134110451)
                double3 xformOp:scale = (0.10000000149011612, 0.25, 0.10000000149011612)
                double3 xformOp:translate = (-2.8000000417232513, -2.125, 0.6000000089406967)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "handle_01" (
                prepend references = @./meshes/CJHouse/kitchencabinetHandle.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_94A0687761B5F008/Metal> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90.00000134110451, 0, 0)
                double3 xformOp:scale = (0.10000000149011612, 0.25, 0.10000000149011612)
                double3 xformOp:translate = (-2.15, 2.89, 0.6000000089406967)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "mETAL"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_131AB4D2A724A011/mETAL/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_131AB4D2A724A011/mETAL/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_131AB4D2A724A011/mETAL/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/buildings/interiors/Metal042_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./texture/buildings/interiors/Metal042_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./texture/buildings/interiors/Metal042_rough.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        over "mesh_E30AB78471139FD8"
        {
            token visibility = "inherited"

            over "mesh"
            {
                token visibility = "invisible"
            }

            def Xform "KCurtain1" (
                prepend references = @./meshes/CJHouse/curtain1.usd@
            )
            {
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1.0000000149011612, 0.800000011920929, 0.56)
                double3 xformOp:translate = (-3.5, -1.4000000208616257, 0.22)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "KCurtain2" (
                prepend references = @./meshes/CJHouse/curtain2.usd@
            )
            {
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 0.800000011920929, 0.56)
                double3 xformOp:translate = (-3.500000052154064, 2.2, 0.22)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_88BF21F823995573"
        {
            def Material "Darksteel"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_88BF21F823995573/Darksteel/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_88BF21F823995573/Darksteel/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_88BF21F823995573/Darksteel/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/Metal029_1K-PNG_Color.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                        hidden = false
                    )
                    asset inputs:height_texture = @./texture/CJHouse/Metal029_1K-PNG_Displacement.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                        hidden = false
                    )
                    asset inputs:metallic_texture = @./texture/CJHouse/Metal029_1K-PNG_Metalness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Map"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./texture/CJHouse/Metal029_1K-PNG_NormalDX.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./texture/CJHouse/Metal029_1K-PNG_Roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Ovenfire" (
                prepend references = @./meshes/CJHouse/stovefire.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_88BF21F823995573/Darksteel> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 180)
                double3 xformOp:scale = (1.4, 1.4, 1.2)
                double3 xformOp:translate = (-1.6, -3.74, 0.85)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "OVEN" (
                prepend references = @./meshes/CJHouse/oven.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_88BF21F823995573/Stove> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 180)
                double3 xformOp:scale = (1.4000000208616257, 1.4000000208616257, 1.2000000178813934)
                double3 xformOp:translate = (-1.25, -3.34, -1.5000000223517418)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Stove"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_88BF21F823995573/Stove/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_88BF21F823995573/Stove/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_88BF21F823995573/Stove/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/stove_1001_baseColor.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    asset inputs:metallic_texture = @./texture/CJHouse/stove_1001_metallicRoughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Map"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./texture/CJHouse/stove_1001_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./texture/CJHouse/stove_1001_metallicRoughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        over "mesh_6F7120FFAB5B60AC"
        {
            def Xform "Doorkitchen" (
                prepend references = @./meshes/CJHouse/Doornohandle.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_6F7120FFAB5B60AC/Doorkitchen01> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, -90)
                double3 xformOp:scale = (2.1000000312924385, 1.2000000178813934, 1.42)
                double3 xformOp:translate = (4.700000070035458, 2.0000000298023224, -1.8000000268220901)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Doorkitchen01"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_6F7120FFAB5B60AC/Doorkitchen01/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_6F7120FFAB5B60AC/Doorkitchen01/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_6F7120FFAB5B60AC/Doorkitchen01/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/Wood 04_diffuse.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./texture/CJHouse/Wood 04_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./texture/CJHouse/Wood 04_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        over "mesh_E77A2E60B2780D1F"
        {
            over "mesh" (
                active = false
            )
            {
                token visibility = "invisible"
            }

            def Xform "Buffetbody" (
                prepend references = @./meshes/CJHouse/buffet.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_E77A2E60B2780D1F/Buffettex> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0014, 0.0019, 0.0012)
                double3 xformOp:translate = (-3.7000000551342964, 1.0000000149011612, -2.39)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Buffettex"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_E77A2E60B2780D1F/Buffettex/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_E77A2E60B2780D1F/Buffettex/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_E77A2E60B2780D1F/Buffettex/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/Buffet_BaseColor.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                        hidden = false
                    )
                    asset inputs:height_texture = @./texture/CJHouse/Buffet_Displacement.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                        hidden = false
                    )
                    asset inputs:metallic_texture = @./texture/CJHouse/Buffet_Metallic.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./texture/CJHouse/Buffet_Roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Buffethandle" (
                prepend references = @./meshes/CJHouse/poignebuffet.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_E77A2E60B2780D1F/Buffethandletex> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, -90)
                double3 xformOp:scale = (0.0014, 0.0014, 0.0012)
                double3 xformOp:translate = (-3.1000000461935997, 1.0000000149011612, -2.37)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Buffethandletex"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_E77A2E60B2780D1F/Buffethandletex/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_E77A2E60B2780D1F/Buffethandletex/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_E77A2E60B2780D1F/Buffethandletex/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/BUFFET-paint_D.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    asset inputs:metallic_texture = @./texture/CJHouse/BUFFET-paint_M.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Map"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./texture/CJHouse/BUFFET-paint_N.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        over "mesh_9B3132ED34651E7C"
        {
            def Xform "Plant" (
                prepend references = @./meshes/CJHouse/tallplant2.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_9B3132ED34651E7C/leaves> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.6000000089406967, 0.6000000089406967, 0.6000000089406967)
                double3 xformOp:translate = (-3.400000050663948, -6.800000101327896, -1.44)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Circle"
                {
                    over "Plane_001"
                    {
                    }
                }
            }

            def Xform "Plant_01" (
                prepend references = @./meshes/CJHouse/tallplant2.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_9B3132ED34651E7C/leaves> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.6000000089406967, 0.6000000089406967, 0.6000000089406967)
                double3 xformOp:translate = (-8.200000122189522, -14.500000216066837, -1.44)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "leaves"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_9B3132ED34651E7C/leaves/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_9B3132ED34651E7C/leaves/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_9B3132ED34651E7C/leaves/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/Leaves.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_3FA2AB33729CF181"
        {
            def Xform "Pot" (
                prepend references = @./meshes/CJHouse/tallplant.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-3.400000050663948, -6.800000101327896, -2.400000035762787)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Pot_01" (
                prepend references = @./meshes/CJHouse/tallplant.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-8.200000122189522, -14.500000216066837, -2.400000035762787)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_5EC9705CA10A1DF5"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_5488453906EB9EA9"
        {
            def Xform "Photoframe" (
                prepend references = @./meshes/CJHouse/photoframe.usd@
            )
            {
                token visibility = "invisible"
                double3 xformOp:rotateXYZ = (-90.00000134110451, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1.99, -10.100000150501728, 0.35)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Photoframe_01" (
                prepend references = @./meshes/CJHouse/photoframe.usd@
            )
            {
                token visibility = "invisible"
                double3 xformOp:rotateXYZ = (-90.00000134110451, 0, -90)
                double3 xformOp:scale = (0.9000000134110451, 0.9000000134110451, 0.9000000134110451)
                double3 xformOp:translate = (0, -2.2000000327825546, 0.27)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "picture" (
                prepend references = @./meshes/CJHouse/photoframepicture.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5488453906EB9EA9/Picture> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                token visibility = "invisible"
                double3 xformOp:rotateXYZ = (-90.00000134110451, 0, -90)
                double3 xformOp:scale = (0.9000000134110451, 0.9000000134110451, 0.9000000134110451)
                double3 xformOp:translate = (0, -2.2000000327825546, 0.27)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Picture"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_5488453906EB9EA9/Picture/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_5488453906EB9EA9/Picture/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_5488453906EB9EA9/Picture/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/tomas.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_EA6C30F33C8F3468"
        {
            over "mesh" (
                active = false
            )
            {
                token visibility = "invisible"
            }
        }

        over "mesh_EA42B233935CCAF8"
        {
            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/CJHouse/plate.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.9000000283122063, 1.9000000283122063, 1.9000000283122063)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_C59138A2CEACF63A"
        {
            def Xform "Littlespoon" (
                prepend references = @./meshes/CJHouse/littlespoon.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 32.9000004902482)
                double3 xformOp:scale = (1.6, 1.6, 1.6)
                double3 xformOp:translate = (-0.05, 0.05, 0.01)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Littlespoon_01" (
                prepend references = @./meshes/CJHouse/littlespoon.usd@
            )
            {
                double3 xformOp:rotateXYZ = (-72.6000010818243, 0, 32.9000004902482)
                double3 xformOp:scale = (1.6, 1.6, 1.6)
                double3 xformOp:translate = (-0.10000000149011612, -0.10000000149011612, 0.10000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_5547B0CACF77578A"
        {
            def Xform "Cup" (
                prepend references = @./meshes/CJHouse/cup.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.600000023841858, 1.600000023841858, 1.600000023841858)
                double3 xformOp:translate = (0.06, 0.01, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Cup_01" (
                prepend references = @./meshes/CJHouse/cup.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.600000023841858, 1.600000023841858, 1.600000023841858)
                double3 xformOp:translate = (-0.05, -0.05, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Cup_02" (
                prepend references = @./meshes/CJHouse/cup.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 20, 0)
                double3 xformOp:scale = (1.600000023841858, 1.600000023841858, 1.600000023841858)
                double3 xformOp:translate = (-0.059, -0.05, 0.037)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_FD8934704F73733F"
        {
            rel material:binding = </RootNode/Looks/mat_EDA20D7568E1C778> (
                bindMaterialAs = "weakerThanDescendants"
            )

            def Xform "cadrephoto" (
                prepend references = @./meshes/CJHouse/photoframe.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_FD8934704F73733F/Wood_04> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (-90.00000134110451, 0, -90)
                double3 xformOp:scale = (0.9000000134110451, 0.9000000134110451, 0.9000000134110451)
                double3 xformOp:translate = (0, -7.900000117719173, 0.27)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Wood_04"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_FD8934704F73733F/Wood_04/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_FD8934704F73733F/Wood_04/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_FD8934704F73733F/Wood_04/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/Wood 04_diffuse.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./texture/CJHouse/Wood 04_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./texture/CJHouse/Wood 04_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "cadrephoto_01" (
                prepend references = @./meshes/CJHouse/photoframe.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_FD8934704F73733F/Wood_04> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (-90.00000134110451, 0, -90.00000134110451)
                double3 xformOp:scale = (0.9000000134110451, 0.9000000134110451, 0.9000000134110451)
                double3 xformOp:translate = (7.955, -1.700000025331974, 0.10000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_AFA7E7AB6F7F3EEF"
        {
            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/CJHouse/photoframepicture.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -7.900000117719173, 0.30000000447034836)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_C00E7488150794F8"
        {
            rel material:binding (
                bindMaterialAs = "weakerThanDescendants"
            )

            def Xform "Couch" (
                prepend references = @./meshes/CJHouse/couchCC0.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_C00E7488150794F8/Leather> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 185.40000276267529)
                double3 xformOp:scale = (1.3000000193715096, 1.3000000193715096, 1.3000000193715096)
                double3 xformOp:translate = (-7.65, -1.9000000283122063, -2.42)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Couchfeet" (
                prepend references = @./meshes/CJHouse/couchfeetCC0.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_94A0687761B5F008/Metal> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 5.4)
                double3 xformOp:scale = (1.3000000193715096, 1.3000000193715096, 1.3000000193715096)
                double3 xformOp:translate = (-7.700000114738941, -1.9000000283122063, -2.400000035762787)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Leather"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_C00E7488150794F8/Leather/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_C00E7488150794F8/Leather/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_C00E7488150794F8/Leather/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/Leather014_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                        hidden = false
                    )
                    asset inputs:height_texture = @./texture/CJHouse/Leather014_height.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./texture/CJHouse/Leather014_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./texture/CJHouse/Leather014_rough.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_22CACE9787613EA6"
        {
            def Xform "Curtainleft" (
                prepend references = @./meshes/CJHouse/curtain1.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                token visibility = "inherited"
                
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 0.9000000134110451, 1)
                double3 xformOp:translate = (-2.9000000432133675, 5.445, 0.6)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CURTAIN_2_007"
                {
                    over "Plane_019"
                    {
                        rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                over "Plane_019"
                {
                    over "Plane_019"
                    {
                        rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "Curtainright" (
                prepend references = @./meshes/CJHouse/curtain2.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 0.9000000134110451, 1)
                double3 xformOp:translate = (0.4000000059604645, 5.445, 0.6)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CURTAIN_2_008"
                {
                    over "Plane_020"
                    {
                        rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "fabric"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_22CACE9787613EA6/fabric/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_22CACE9787613EA6/fabric/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_22CACE9787613EA6/fabric/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/Fabric 01_baseColor.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./texture/CJHouse/Fabric 01_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./texture/CJHouse/Fabric 01_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Curatinhang" (
                prepend references = @./meshes/CJHouse/curtainhanger.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_94A0687761B5F008/Metal> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1.33, 5.445, 0.6000000089406967)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Curtainleft_01" (
                prepend references = @./meshes/CJHouse/curtain1.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1.3000000193715096, 1, 1)
                double3 xformOp:translate = (-3.500000052154064, -5.200000077486038, 4.300000064074993)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CURTAIN_2_007"
                {
                    over "Plane_019"
                    {
                        rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                over "Plane_019"
                {
                    over "Plane_019"
                    {
                        rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "Curtainright_01" (
                prepend references = @./meshes/CJHouse/curtain2.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1.3000000193715096, 1, 1)
                double3 xformOp:translate = (-3.500000052154064, -1.700000025331974, 4.300000064074993)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CURTAIN_2_008"
                {
                    over "Plane_020"
                    {
                        rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                over "Plane_020"
                {
                    over "Plane_020"
                    {
                        rel material:binding = </RootNode/meshes/mesh_22CACE9787613EA6/fabric> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "Curatinhang_01" (
                prepend references = @./meshes/CJHouse/curtainhanger.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_94A0687761B5F008/Metal> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1.3000000193715096, 1, 1)
                double3 xformOp:translate = (-3.500000052154064, -3.6000000536441803, 4.300000064074993)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_0137CC375C8492D0"
        {
            token visibility = "inherited"

            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Light" (
                prepend references = @./meshes/CJHouse/Pendantlight.usd@
            )
            {
                double3 xformOp:rotateXYZ = (180, 0, 0)
                double3 xformOp:scale = (2.2000000327825546, 2.2000000327825546, 0.77)
                double3 xformOp:translate = (-6.63, -1.56, 1.12)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_372B05755278B619"
        {
            def Xform "SINK" (
                prepend references = @./meshes/CJHouse/sink.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_94A0687761B5F008/Metal> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90.00000134110451, 0, 0)
                double3 xformOp:scale = (0.017, 0.02, 0.02)
                double3 xformOp:translate = (-3.02, 0.45, -2.14)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh"
            {
                token visibility = "invisible"
            }
        }

        over "mesh_CB0AA79E6A119372"
        {
            def Xform "Door" (
                prepend references = @./meshes/CJHouse/Doornohandle.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_6F7120FFAB5B60AC/Doorkitchen01> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.700000025331974, 2.0000000298023224, 1.2000000178813934)
                double3 xformOp:translate = (0.800000011920929, 0.10000000149011612, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_8726C81963AFA0FD"
        {
            def Xform "Sinkcurtain" (
                prepend references = @./meshes/CJHouse/curtain1.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90.00000134110451)
                double3 xformOp:scale = (2.7000000402331352, 0.7000000104308128, 0.6000000089406967)
                double3 xformOp:translate = (-2.500000037252903, -1.9000000283122063, -1.600000023841858)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_8A780C51AB2A62F6"
        {
            token visibility = "inherited"

            def Xform "Cabinetdoor" (
                prepend references = @./meshes/CJHouse/kitchencabinetdoorvertAAAAAAA.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.4000000059604645, 0.37, 0.5)
                double3 xformOp:translate = (-2.534, -2.49, -0.64)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Cube_002"
                {
                    rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            def Xform "Cabinetdoor_01" (
                prepend references = @./meshes/CJHouse/kitchencabinetdoorvertAAAAAAA.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.4000000059604645, 0.37, 0.5)
                double3 xformOp:translate = (-2.500000037252903, 2.15, -0.64)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Cabinetdoor_02" (
                prepend references = @./meshes/CJHouse/kitchencabinetdoorvertAAAAAAA.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Kitchenwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, -90.00000134110451)
                double3 xformOp:scale = (0.4000000059604645, 0.3, 0.5)
                double3 xformOp:translate = (-2.2000000327825546, 2.64, -0.64)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_C74582CCC5262CAC"
        {
            def Xform "Plantpot" (
                prepend references = @./meshes/CJHouse/tallplant.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 0.5000000074505806)
                double3 xformOp:translate = (0.06, -0.10000000149011612, -0.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_13C7A903B959D052"
        {
            def Xform "Plant" (
                prepend references = @./meshes/CJHouse/tallplant2.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.30000000447034836, 0.30000000447034836, 0.30000000447034836)
                double3 xformOp:translate = (0.05, -0.10000000149011612, 0.02)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Circle"
                {
                    over "Circle_001"
                    {
                        rel material:binding = </RootNode/meshes/mesh_9B3132ED34651E7C/leaves> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_1D77CCD2E143C480"
        {
            def Material "Darkwood"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_1D77CCD2E143C480/Darkwood/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_1D77CCD2E143C480/Darkwood/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_1D77CCD2E143C480/Darkwood/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/Wood066_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                        hidden = false
                    )
                    asset inputs:height_texture = @./texture/CJHouse/Wood066_height.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./texture/CJHouse/Wood066_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./texture/CJHouse/Wood066_rough.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Bedsidebodydark" (
                prepend references = @./meshes/CJHouse/bedsitedark.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_1D77CCD2E143C480/Darkwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (2.500000037252903, 2.0000000298023224, 2.0000000298023224)
                double3 xformOp:translate = (0, 1.2000000178813934, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Bedsidedoorlight" (
                prepend references = @./meshes/CJHouse/bedsitelight.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (2.500000037252903, 2.0000000298023224, 2.0000000298023224)
                double3 xformOp:translate = (0, 1.2000000178813934, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_96A5A8BA8494AB88"
        {
            def Xform "BedsideRdark" (
                prepend references = @./meshes/CJHouse/bedsitedark.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_1D77CCD2E143C480/Darkwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.700000025331974, 1.700000025331974, 1.700000025331974)
                double3 xformOp:translate = (0, 1.1000000163912773, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "bedsideRlight" (
                prepend references = @./meshes/CJHouse/bedsitelight.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.700000025331974, 1.700000025331974, 1.700000025331974)
                double3 xformOp:translate = (0, 1.1000000163912773, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_A75B2A6F58DC05BD"
        {
            def Xform "Bedwood" (
                prepend references = @./meshes/CJHouse/bedwood.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_1D77CCD2E143C480/Darkwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90.00000134110451, 0, 0)
                double3 xformOp:scale = (0.0106, 0.015, 0.012)
                double3 xformOp:translate = (0.423, 2.400000035762787, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh"
            {
                token visibility = "invisible"
            }
        }

        over "mesh_0CB18C2CAF976AED"
        {
            over "mesh"
            {
                token visibility = "invisible"
            }

            def Xform "Mattress" (
                prepend references = @./meshes/CJHouse/bedmattress.usd@
            )
            {
                double3 xformOp:rotateXYZ = (90.00000134110451, 0, 0)
                double3 xformOp:scale = (0.0106, 0.02, 0.012)
                double3 xformOp:translate = (0.423, 2.400000035762787, -0.30000000447034836)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_69C16D49E8B6B8AB"
        {
            def Xform "Blanket" (
                prepend references = @./meshes/CJHouse/bedblanket.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_69C16D49E8B6B8AB/blanket> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90.00000134110451, 0, 0)
                double3 xformOp:scale = (0.0106, 0.013, 0.012)
                double3 xformOp:translate = (0.423, 2.35, 0.04)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "blanket"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_69C16D49E8B6B8AB/blanket/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_69C16D49E8B6B8AB/blanket/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_69C16D49E8B6B8AB/blanket/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/Fabric053_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                        hidden = false
                    )
                    asset inputs:height_texture = @./texture/CJHouse/Fabric053_height.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./texture/CJHouse/Fabric053_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./texture/CJHouse/Fabric053_rough.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        over "mesh_DC69D0249AE12DB3"
        {
            over "mesh"
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.800000011920929, 0.20000000298023224, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_332272FE166B2EE9"
        {
            over "mesh"
            {
                double3 xformOp:rotateXYZ = (0, 0, -266.7000039741397)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.6000000089406967, -0.30000000447034836, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_9A9A169DDC5F94E3"
        {
            over "mesh" (
                active = false
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -86.60000129044056)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.5000000074505806, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_17F5EC7C90DA8BDC"
        {
            over "mesh"
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.10000000149011612, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_F146750EF84046B8"
        {
            over "mesh"
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.10000000149011612, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_E455DD05E1A687B0"
        {
            over "mesh"
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.10000000149011612, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_12F3744D12256292"
        {
            over "mesh"
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }

        over "mesh_7642E8F510D6C8C9"
        {
            over "mesh"
            {
                rel material:binding = </RootNode/meshes/mesh_5C55C34A2DBD7792/Lightwood> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }

        over "mesh_5D8FB85D290F2DC7"
        {
            def Xform "Lamp" (
                prepend references = @./meshes/CJHouse/rooflamp.usd@
            )
            {
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, -1.23)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_C1D497B960CE274C"
        {
            def Xform "Chaircinematic" (
                prepend references = @./meshes/CJHouse/chair.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_94A0687761B5F008/Metal> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, -71.60000106692314)
                double3 xformOp:scale = (1.1000000163912773, 1.1000000163912773, 1.1000000163912773)
                double3 xformOp:translate = (-0.30000000447034836, 0, -0.94)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_28549AFDD68556E1"
        {
            def Xform "frame" (
                prepend references = @./meshes/CJHouse/photoframe.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_FD8934704F73733F/Wood_04> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (-90.00000134110451, 0, -90)
                double3 xformOp:scale = (0.9000000134110451, 0.9000000134110451, 0.9000000134110451)
                double3 xformOp:translate = (-13.200000196695328, -0.30000000447034836, 0.27)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }

            def Xform "frame_01" (
                prepend references = @./meshes/CJHouse/photoframe.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_FD8934704F73733F/Wood_04> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (-90.00000134110451, 0, -90)
                double3 xformOp:scale = (0.9000000134110451, 0.9000000134110451, 0.9000000134110451)
                double3 xformOp:translate = (0, -0.30000000447034836, 0.27)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_07C6F4946660DD7C"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_66BBFFD57CBBBE0D"
        {
            def Xform "Cans" (
                prepend references = @./meshes/CJHouse/cans.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -69.60000103712082)
                double3 xformOp:scale = (2.500000037252903, 2.500000037252903, 2.9000000432133675)
                double3 xformOp:translate = (-0.20000000298023224, 0.10000000149011612, 0.04)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Cans_01" (
                prepend references = @./meshes/CJHouse/cans.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -69.60000103712082)
                double3 xformOp:scale = (2.500000037252903, 2.500000037252903, 2.9000000432133675)
                double3 xformOp:translate = (0.10000000149011612, 0.20000000298023224, 0.04)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Cans_02" (
                prepend references = @./meshes/CJHouse/cans.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -69.60000103712082)
                double3 xformOp:scale = (2.500000037252903, 2.500000037252903, 2.9000000432133675)
                double3 xformOp:translate = (-0.10000000149011612, 0.20000000298023224, 0.04)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_A6C00156BCA16714"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_2A2A9250D892E994"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_8DCE8B32FEB9BF49"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_556F1242C15C1E3A"
        {
            over "glasswithdrops" (
                active = false
            )
            {
            }

            def Material "beer"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_556F1242C15C1E3A/beer/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_556F1242C15C1E3A/beer/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_556F1242C15C1E3A/beer/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Translucent.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                    float inputs:ior_constant = 2.01 (
                        customData = {
                            float default = 1.3
                            dictionary range = {
                                float max = 3
                                float min = 1
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Index of Refraction"
                        doc = "Index of Refraction of the material"
                        hidden = false
                    )
                    bool inputs:thin_walled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Specular"
                        displayName = "Thin-walled"
                        doc = "Whether the material is thin-walled"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Label_beer" (
                prepend references = @./meshes/CJHouse/Beerlabel.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_556F1242C15C1E3A/Beer_label> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, -150.60000224411488)
                double3 xformOp:scale = (0.03, 0.03, 0.03)
                double3 xformOp:translate = (0.01, 0.0004, -0.122)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Beer_label"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_556F1242C15C1E3A/Beer_label/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_556F1242C15C1E3A/Beer_label/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_556F1242C15C1E3A/Beer_label/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/Crown-extra-beer-Label.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            over "Beer" (
                active = false
            )
            {
                double3 xformOp:scale = (0.04, 0.04, 0.04)
            }

            def Xform "Xform_mesh_0" (
                active = false
                prepend references = @./meshes/CJHouse/Beerbottle.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -150.60000224411488)
                double3 xformOp:scale = (0.03, 0.03, 0.03)
                double3 xformOp:translate = (0.01, 0.0003, -0.122)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Liquid" (
                prepend references = @./meshes/CJHouse/beerliquid.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_556F1242C15C1E3A/Beerliquid> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.03, 0.03, 0.03)
                double3 xformOp:translate = (0.01, 0, -0.122)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Beerliquid"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_556F1242C15C1E3A/Beerliquid/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_556F1242C15C1E3A/Beerliquid/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_556F1242C15C1E3A/Beerliquid/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Translucent.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                    color3f inputs:transmittance_color = (0.97, 0.97, 0.97) (
                        customData = {
                            float3 default = (0.97, 0.97, 0.97)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Volume"
                        displayName = "Transmittance Color"
                        doc = "Expected transmittance after the specified transmittance distance through the volume."
                        hidden = false
                    )
                    asset inputs:transmittance_texture = @@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Volume"
                        displayName = "Transmittance or Diffuse Albedo Texture"
                        doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Bottle" (
                prepend references = @./meshes/CJHouse/Beerbottle.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_556F1242C15C1E3A/beer> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, -150.60000224411488)
                double3 xformOp:scale = (0.03, 0.03, 0.03)
                double3 xformOp:translate = (0.01, 0.0003, -0.122)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_99CC106F457F1BD4"
        {
            def Xform "JDBottle" (
                prepend references = @./meshes/CJHouse/JDBottle.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_99CC106F457F1BD4/Glass> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.06, 0.06, 0.12)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                double3 xformOp:translate = (0, 0, 0.126)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "JDLogo" (
                prepend references = @./meshes/CJHouse/JDLogo.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_99CC106F457F1BD4/JDlogo> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.06, 0.06, 0.12)
                double3 xformOp:translate = (0, 0, 0.126)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh"
            {
                token visibility = "invisible"
            }

            def Material "Glass"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_99CC106F457F1BD4/Glass/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_99CC106F457F1BD4/Glass/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_99CC106F457F1BD4/Glass/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Translucent.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                    bool inputs:enable_emission = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Emissive"
                        displayName = "Enable Emission"
                        doc = "Enables the emission of light from the material"
                        hidden = false
                    )
                    float inputs:ior_constant = 1.3 (
                        customData = {
                            float default = 1.3
                            dictionary range = {
                                float max = 3
                                float min = 1
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Index of Refraction"
                        doc = "Index of Refraction of the material"
                        hidden = false
                    )
                    float inputs:thin_wall_thickness = 1 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 65504
                                float min = 0.001
                            }
                            dictionary soft_range = {
                                float max = 1
                                float min = 0.001
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Thin-walled material thickness"
                        doc = "Simulated thickness for thin-walled materials (0 disables thin-walled mode)"
                        hidden = false
                    )
                    bool inputs:thin_walled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Specular"
                        displayName = "Thin-walled"
                        doc = "Whether the material is thin-walled"
                        hidden = false
                    )
                    color3f inputs:transmittance_color = (0.97, 0.97, 0.97) (
                        customData = {
                            float3 default = (0.97, 0.97, 0.97)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Volume"
                        displayName = "Transmittance Color"
                        doc = "Expected transmittance after the specified transmittance distance through the volume."
                        hidden = false
                    )
                    bool inputs:use_diffuse_layer = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Volume"
                        displayName = "Use diffuse layer"
                        doc = "When set, simulates a diffuse layer on top of the material"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "JDlogo"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_99CC106F457F1BD4/JDlogo/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_99CC106F457F1BD4/JDlogo/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_99CC106F457F1BD4/JDlogo/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/Jack_Daniels_Logo_03.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            over "JDLiquid01" (
                active = false
            )
            {
                double3 xformOp:translate = (0, 0, 0.126)
            }
        }

        over "mesh_B6B331A98CA26D51"
        {
            def Xform "JDLOGO2" (
                prepend references = @./meshes/CJHouse/JDLogo.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_99CC106F457F1BD4/JDlogo> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.07, 0.07, 0.12)
                double3 xformOp:translate = (0, 0, -0.013)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh"
            {
                token visibility = "invisible"
            }

            def Xform "jd2" (
                prepend references = @./meshes/CJHouse/JDBottle.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_99CC106F457F1BD4/Glass> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.07, 0.07, 0.12)
                double3 xformOp:translate = (0, 0, -0.013)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "JDLIQUID2" (
                prepend references = @./meshes/CJHouse/JDLiquid.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.055, 0.055, 0.096)
                double3 xformOp:translate = (0, 0, -0.013)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_74DEB98A1A78AF2A"
        {
            def Xform "Garagedoor" (
                prepend references = @./meshes/CJHouse/Grovestreet/Garagedoor.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_74DEB98A1A78AF2A/Garagedoor01> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, -89.3000013306737)
                double3 xformOp:scale = (3.0000000447034836, 1, 2.0000000298023224)
                double3 xformOp:translate = (-0.10000000149011612, -0.10000000149011612, -1.9000000283122063)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Material "Garagedoor01"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_74DEB98A1A78AF2A/Garagedoor01/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_74DEB98A1A78AF2A/Garagedoor01/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_74DEB98A1A78AF2A/Garagedoor01/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./texture/CJHouse/rollershutter_window_01_diff_4k.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    asset inputs:metallic_texture = @./texture/CJHouse/rollershutter_window_01_metal_4k.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Map"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./texture/CJHouse/rollershutter_window_01_nor_gl_4k.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./texture/CJHouse/rollershutter_window_01_rough_4k.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        over "mesh_94179CA5E9B28A1E"
        {
            over "mesh"
            {
                token visibility = "invisible"
            }

            def Xform "Xform_mesh_0" (

                prepend references = @./meshes/CJHouse/Stairs.usd@
            )
            {
                rel material:binding = </RootNode/meshes/mesh_94179CA5E9B28A1E/Woodstairs> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }


            def Material "Woodstairs"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_94179CA5E9B28A1E/Woodstairs/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_94179CA5E9B28A1E/Woodstairs/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_94179CA5E9B28A1E/Woodstairs/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @./materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Base Color"
                        doc = "The base albedo color to use if no texture is specified"
                        hidden = false
                    )
                    asset inputs:diffuse_texture = @./texture/CJHouse/Wood051_2K-PNG_Color.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                    )
                    float inputs:displace_in = 0.01 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                        hidden = false
                    )
                    asset inputs:height_texture = @./texture/CJHouse/Wood051_2K-PNG_Displacement.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./texture/CJHouse/Wood051_2K-PNG_NormalDX.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./texture/CJHouse/Wood051_2K-PNG_Roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        over "mesh_6A77B6020B78E3E6"
        {
            token visibility = "inherited"

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_3A658330EBE4BD63"
        {
            def Xform "PLATE" (
                prepend references = @./meshes/CJHouse/plate.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.01, -0.034, 0.13)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "PLATE_01" (
                prepend references = @./meshes/CJHouse/plate.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.01, -0.034, 0.12)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh"
            {
                token visibility = "invisible"
            }

            def Xform "PLATE_02" (
                prepend references = @./meshes/CJHouse/plate.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.01, -0.034, 0.11)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "PLATE_03" (
                prepend references = @./meshes/CJHouse/plate.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.01, -0.034, 0.1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "PLATE_04" (
                prepend references = @./meshes/CJHouse/plate.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.01, -0.034, 0.09)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "PLATE_05" (
                prepend references = @./meshes/CJHouse/plate.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.700000025331974, 1.700000025331974, 1.700000025331974)
                double3 xformOp:translate = (-0.01, -0.034, 0.077)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "PLATE_06" (
                prepend references = @./meshes/CJHouse/plate.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.700000025331974, 1.700000025331974, 1.700000025331974)
                double3 xformOp:translate = (-0.01, -0.034, 0.066)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "PLATE_07" (
                prepend references = @./meshes/CJHouse/plate.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.700000025331974, 1.700000025331974, 1.700000025331974)
                double3 xformOp:translate = (-0.01, -0.034, 0.055)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "PLATE_08" (
                prepend references = @./meshes/CJHouse/plate.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.700000025331974, 1.700000025331974, 1.700000025331974)
                double3 xformOp:translate = (-0.01, -0.034, 0.044)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "PLATE_09" (
                prepend references = @./meshes/CJHouse/plate.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.700000025331974, 1.700000025331974, 1.700000025331974)
                double3 xformOp:translate = (-0.01, -0.034, 0.033)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "PLATE_10" (
                prepend references = @./meshes/CJHouse/plate.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1.700000025331974, 1.700000025331974, 1.700000025331974)
                double3 xformOp:translate = (-0.01, -0.034, 0.022)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_EBF138544E6BD027"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_D3D14B59CD93B374"
        {
            def Xform "Picture" (
                prepend references = @./meshes/CJHouse/photoframepicture.usd@
            )
            {
                double3 xformOp:rotateXYZ = (-90.00000134110451, 0, -90)
                double3 xformOp:scale = (0.9000000134110451, 0.9000000134110451, 0.9000000134110451)
                double3 xformOp:translate = (0, -0.30000000447034836, 0.27)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_F5A61CE05802338A"
        {
            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/CJHouse/photoframepicture.usd@
            )
            {
                double3 xformOp:rotateXYZ = (-90.00000134110451, 0, -90.00000134110451)
                double3 xformOp:scale = (0.9000000134110451, 0.9000000134110451, 0.9000000134110451)
                double3 xformOp:translate = (7.955, -1.700000025331974, 0.10000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_408FB786C12828B8"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_8015937B514196BD"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_A443AA9663212AE8"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_898CF16C05C9BD72"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_D8A11B27B655A026"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_B498133440D3CDEE"
        {
            def Xform "Mirror" (
                references = @./meshes/props/Saloon/Mirror.usd@
            )
            {
                double3 xformOp:rotateYZX = (0, 90, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.400000035762787, -1.600000023841858, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateYZX", "xformOp:scale"]
            }
        }

        over "mesh_190BB4FCED714317"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_DA83465B73A329A4"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_F0EF9CBD2E176CB0"
        {
            token visibility = "inherited"

            over "mesh" (
                active = false
            )
            {
                token visibility = "invisible"
            }

            def Xform "floor" (
                prepend references = @./meshes/CJHouse/Floore.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }
    }

    over "Looks"
    {
        over "mat_B9AEEDFA0409F46B"
        {
            over "Shader"
            {
                color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./texture/CJHouse/Leather014_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @./texture/CJHouse/Leather014_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Leather014_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:opacity_constant = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Opacity Amount"
                    doc = "Used when no albedo texture is specified. 0 for completely transparent, 1 for completly opaque."
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Leather014_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_0D15E29E9ABFAAD5"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Planks037A_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @./texture/CJHouse/Planks037A_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:metallic_texture = @./texture/CJHouse/Planks037A_metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Planks037A_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Planks037A_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_41CA6D90C1ED41EC"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/dining_chair_02_diff_4k.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./texture/CJHouse/dining_chair_02_metal_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/dining_chair_02_nor_dx_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/dining_chair_02_rough_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_1965A327A53BCFE0"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Carpet003_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @./texture/CJHouse/Carpet003_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Carpet003_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Carpet003_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_9416A016D7DDD618"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Fabric022_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @./texture/CJHouse/Fabric022_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Fabric022_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Fabric022_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_411542E0C644EC08"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/wooden_table_02_diff_4k.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./texture/CJHouse/wooden_table_02_metal_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/wooden_table_02_nor_dx_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/wooden_table_02_rough_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_39779D0586819861"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/39779D0586819861.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_7F005A1E1BC1CA8D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/7F005A1E1BC1CA8D.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:normalmap_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_BCB53BBEE0A8897C"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Concrete034_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Concrete034_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Concrete034_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_271089CB22BB0F6F"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/herringbone_parquet_diff_4k.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @./texture/CJHouse/herringbone_parquet_disp_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/herringbone_parquet_nor_dx_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/herringbone_parquet_rough_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_453404F24C4E6858"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Chocofur_Leather_Simple_01_diff.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_1A9A79A481BEEEB3"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Concrete034_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.0001 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @./texture/CJHouse/Concrete034_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Concrete034_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Concrete034_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_8332E2C8765A6BA9"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Planks021_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @./texture/CJHouse/Planks021_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Planks021_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Planks021_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_D9A4C29EB4CF0C8E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Leaves.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:normalmap_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_CD99E5440F56B7CE"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/potted_plant_02_pot_diff_4k.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @./texture/CJHouse/potted_plant_02_pot_disp_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/potted_plant_02_pot_nor_dx_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/potted_plant_02_pot_rough_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_A32945DFAF434F6E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/floor_tiles_08_diff_4k.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
            }
        }

        over "mat_B804E0D4DCB9B449"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Concrete034_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @./texture/CJHouse/Concrete034_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Concrete034_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Concrete034_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_B0923DCA8204364D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Concrete034_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @./texture/CJHouse/Concrete034_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Concrete034_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Concrete034_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_61CEB3E9878DA700"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Concrete034_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @./texture/CJHouse/Concrete034_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Concrete034_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Concrete034_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_4E702141761F7B72"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Television_01_diff_4k.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./texture/CJHouse/Television_01_metallic_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Television_01_nor_dx_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Television_01_roughness_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_2C240A0B7EB11C9A"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/door_diff.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/door_norm.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/door_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_7B6E6D4C897AE7B6"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Matal_solid_paint_white_Base Color.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./texture/CJHouse/Matal_solid_paint_white_Metallic.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Matal_solid_paint_white_Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Matal_solid_paint_white_Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_D3C129AC4EA0B0C4"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Woodkitchen_Color.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @./texture/CJHouse/Woodkitchen_Displacement.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Woodkitchen_NormalDX.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Woodkitchen_Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_8BB3D517662C5808"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Fabric 01_baseColor.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Fabric 01_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Fabric 01_roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_9C4A179E43E11888"
        {
            over "Shader"
            {
                color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./texture/CJHouse/Planks021_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @./texture/CJHouse/Planks021_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Planks021_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Planks021_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_1E178DEC855CE691"
        {
            over "Shader"
            {
                color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./texture/CJHouse/tomas.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                bool inputs:enable_thin_film = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Enable thin film"
                    doc = "Adds a thin film coating to the material"
                    hidden = false
                )
                float inputs:thin_film_thickness_constant = 200 (
                    customData = {
                        float default = 200
                        dictionary range = {
                            float max = 1500
                            float min = 0.001
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Thin film constant thickness in nm"
                    doc = "Thickness of the thin film if not specified in albedo texture"
                    hidden = false
                )
                bool inputs:thin_film_thickness_from_albedo_alpha = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Thin film thickness from albedo alpha"
                    doc = "Uses the alpha channel from albedo as source for the thin film thickness. Alpha value is scaled by 1500 and represents thickness in nanometers. Opacity becomes fully opaque in this case."
                    hidden = false
                )
            }
        }

        over "mat_FCC57EB346CB6484"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Marble012_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @./texture/CJHouse/Marble012_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Marble012_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Marble012_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_2001099F76C3C341"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Wood 04_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Wood 04_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Wood 04_roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_DF6334D545DBF42A"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/stove_1001_baseColor.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./meshes/CJHouse/texture/stove_1001_metallicRoughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./meshes/CJHouse/texture/stove_1001_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./meshes/CJHouse/texture/stove_1001_metallicRoughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_10B0B0B49123E7FF"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Plastic016A_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                asset inputs:height_texture = @./texture/CJHouse/Plastic016A_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Plastic016A_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Plastic016A_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_14665DEAED728721"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Kitchen Set 01_basecolor.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./texture/CJHouse/Kitchen Set 01_metallic.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Kitchen Set 01_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Kitchen Set 01_roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_4C5B36E9141922AA"
        {
            over "Shader"
            {
                uniform bool enable_opacity = 1
                color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./texture/CJHouse/Paint002_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:height_texture = @./texture/CJHouse/Paint002_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/Paint002_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/Paint002_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_31D37B9D6141E5B3"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/Leaves.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
            }
        }

        over "mat_45B78BB18B10A9DC"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./texture/CJHouse/modern_ceiling_lamp_01_diff_4k.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./texture/CJHouse/modern_ceiling_lamp_01_metal_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./texture/CJHouse/modern_ceiling_lamp_01_nor_dx_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./texture/CJHouse/modern_ceiling_lamp_01_rough_4k.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }
    }

    over "Camera"
    {

        token visibility = "invisible"
    }

    over "lights"
    {
        over "light_B24688D24F5F055D"
        {
            double3 xformOp:translate = (2496.331298828125, -1709.8812255859375, 1016.4000151455402)
        }

        over "light_E1054C97145B9D6F"
        {
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (2494.43115234375, -1699.1812744140625, 1016.6343994140625)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_4CDFD32A7D6CD843"
        {
            token visibility = "inherited"
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (2498.7413087964314, -1707.6812744140625, 1020.2730378332377)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        over "light_91B16E5CCB88B671"
        {
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (2496.331298828125, -1709.8812255859375, 1016.390990566775)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }
    }
}

