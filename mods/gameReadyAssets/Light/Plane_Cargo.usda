#usda 1.0
(
    upAxis = "Z"
)

over "RootNode"
{
    over "meshes"
    {
        over "mesh_5EBA8E068B9DF93A"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "Plane_Cargo_Light_self_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:intensity = 5
                float inputs:radius = 3
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 192.5, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-5.684341886080802e-14, -26.11, 8.085)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Plane_Cargo_Light_main_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:intensity = 50
                    float inputs:radius = 3
                    float inputs:shaping:cone:angle = 90
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 180, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1368683772161603e-13, 5.684341886080802e-14, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "Plane_Cargo_Light_self_02" (
                prepend apiSchemas = ["ShapingAPI"]
                hide_in_stage_window = false
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:intensity = 5
                float inputs:radius = 3
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 192.5, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-5.684341886080802e-14, -20.21, 6.715000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Plane_Cargo_Light_main_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:intensity = 50
                    float inputs:radius = 3
                    float inputs:shaping:cone:angle = 90
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 180, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1368683772161603e-13, 5.684341886080802e-14, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "Plane_Cargo_Light_self_03" (
                prepend apiSchemas = ["ShapingAPI"]
                hide_in_stage_window = false
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:intensity = 5
                float inputs:radius = 3
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 192.5, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-5.684341886080802e-14, -14.309999999999999, 5.345000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Plane_Cargo_Light_main_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:intensity = 50
                    float inputs:radius = 3
                    float inputs:shaping:cone:angle = 90
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 180, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1368683772161603e-13, 5.684341886080802e-14, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "Plane_Cargo_Light_self_04" (
                prepend apiSchemas = ["ShapingAPI"]
                hide_in_stage_window = false
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:intensity = 5
                float inputs:radius = 3
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 192.5, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-5.684341886080802e-14, -8.409999999999997, 3.9750000000000005)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Plane_Cargo_Light_main_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:intensity = 50
                    float inputs:radius = 3
                    float inputs:shaping:cone:angle = 90
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 180, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1368683772161603e-13, 5.684341886080802e-14, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "Plane_Cargo_Light_self_05" (
                prepend apiSchemas = ["ShapingAPI"]
                hide_in_stage_window = false
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:intensity = 5
                float inputs:radius = 3
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 192.5, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-5.684341886080802e-14, -2.509999999999998, 2.6050000000000004)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Plane_Cargo_Light_main_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:intensity = 50
                    float inputs:radius = 3
                    float inputs:shaping:cone:angle = 90
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 180, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1368683772161603e-13, 5.684341886080802e-14, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "Plane_Cargo_Light_self_06" (
                prepend apiSchemas = ["ShapingAPI"]
                hide_in_stage_window = false
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:intensity = 5
                float inputs:radius = 3
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 192.5, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-5.684341886080802e-14, 3.3900000000000006, 1.2350000000000003)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Plane_Cargo_Light_main_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:intensity = 50
                    float inputs:radius = 3
                    float inputs:shaping:cone:angle = 90
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 180, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1368683772161603e-13, 5.684341886080802e-14, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "Plane_Cargo_Light_self_07" (
                prepend apiSchemas = ["ShapingAPI"]
                hide_in_stage_window = false
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:intensity = 5
                float inputs:radius = 3
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 192.5, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-5.684341886080802e-14, 9.290000000000006, -0.1349999999999998)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Plane_Cargo_Light_main_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:intensity = 50
                    float inputs:radius = 3
                    float inputs:shaping:cone:angle = 90
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 180, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1368683772161603e-13, 5.684341886080802e-14, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "Plane_Cargo_Light_self_08" (
                prepend apiSchemas = ["ShapingAPI"]
                hide_in_stage_window = false
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:intensity = 5
                float inputs:radius = 3
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 192.5, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-5.684341886080802e-14, 15.190000000000005, -1.504999999999999)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Plane_Cargo_Light_main_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:intensity = 50
                    float inputs:radius = 3
                    float inputs:shaping:cone:angle = 90
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 180, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1368683772161603e-13, 5.684341886080802e-14, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "Plane_Cargo_Light_self_09" (
                prepend apiSchemas = ["ShapingAPI"]
                hide_in_stage_window = false
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:intensity = 5
                float inputs:radius = 3
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 192.5, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-5.684341886080802e-14, 21.090000000000003, -2.875)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Plane_Cargo_Light_main_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:intensity = 50
                    float inputs:radius = 3
                    float inputs:shaping:cone:angle = 90
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 180, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1368683772161603e-13, 5.684341886080802e-14, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }
    }
}

