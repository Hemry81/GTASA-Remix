#usda 1.0
(
    upAxis = "Z"
)

over "RootNode"
{
    over "meshes"
    {
        over "mesh_2D7C7F7B4D8458D7"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "Inside_Track_self_Light_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:colorTemperature = 6500
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 200
                bool inputs:normalize = 0
                float inputs:radius = 2
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool visibleInPrimaryRay = 0
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1.3, -4, 1.9)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Inside_Track_main_Light_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:intensity = 200
                    bool inputs:normalize = 0
                    float inputs:radius = 2
                    float inputs:shaping:cone:angle = 90
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "Inside_Track_self_Light_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:colorTemperature = 6500
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 200
                bool inputs:normalize = 0
                float inputs:radius = 2
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1.3, 1.33, 1.9)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Inside_Track_main_Light_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:intensity = 200
                    bool inputs:normalize = 0
                    float inputs:radius = 2
                    float inputs:shaping:cone:angle = 90
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "Inside_Track_self_Light_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:colorTemperature = 6500
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 200
                bool inputs:normalize = 0
                float inputs:radius = 2
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (5.7, 1.3, 1.9)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Inside_Track_main_Light_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:intensity = 200
                    bool inputs:normalize = 0
                    float inputs:radius = 2
                    float inputs:shaping:cone:angle = 90
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "Inside_Track_self_Light_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:colorTemperature = 6500
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 200
                bool inputs:normalize = 0
                float inputs:radius = 2
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (5.7, -4, 1.9)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Inside_Track_main_Light_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:intensity = 200
                    bool inputs:normalize = 0
                    float inputs:radius = 2
                    float inputs:shaping:cone:angle = 90
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "Inside_Track_self_Light_05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:colorTemperature = 6500
                bool inputs:enableColorTemperature = 0
                float inputs:intensity = 200
                bool inputs:normalize = 0
                float inputs:radius = 1.5
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-4.700000070035458, 4.90000007301569, 1.4000000208616257)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Inside_Track_main_Light_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:intensity = 200
                    bool inputs:normalize = 0
                    float inputs:radius = 1.5
                    float inputs:shaping:cone:angle = 90
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool visibleInPrimaryRay = 1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }
    }
}

