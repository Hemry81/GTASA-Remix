#usda 1.0
(
    upAxis = "Z"
)

over "RootNode"
{
    over "meshes"
    {
        over "mesh_8EA763660FAF40C4"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "Lamp_Light_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float colorTemperature = 4500
                bool enableColorTemperature = 1
                float intensity = 300
                bool normalize = 1
                float radius = 0.05
                float shaping:cone:angle = 60
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (3.022775213822115, -0.10008678228405188, 0.9641710069839746)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Lamp_Light_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float colorTemperature = 4500
                bool enableColorTemperature = 1
                float intensity = 300
                bool normalize = 1
                float radius = 0.05
                float shaping:cone:angle = 60
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (3.387527864355434, -0.10008678228405188, 0.9641710069839746)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Lamp_Light_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float colorTemperature = 4500
                bool enableColorTemperature = 1
                float intensity = 300
                bool normalize = 1
                float radius = 0.05
                float shaping:cone:angle = 60
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (5.878499352369545, -0.10008678228405188, 0.9641710069839746)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Lamp_Light_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float colorTemperature = 4500
                bool enableColorTemperature = 1
                float intensity = 300
                bool normalize = 1
                float radius = 0.05
                float shaping:cone:angle = 60
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (6.25580832211017, -0.10008678228405188, 0.9641710069839746)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Lamp_Light_05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float colorTemperature = 4500
                bool enableColorTemperature = 1
                float intensity = 500
                bool normalize = 1
                float radius = 0.05
                float shaping:cone:angle = 60
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (4.502166080600091, 1.8413899924755697, 1.0000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "Window_Light_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float height = 5
                float intensity = 10
                bool normalize = 1
                float shaping:cone:angle = 60
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                bool visibleInPrimaryRay = 1
                float width = 12
                double3 xformOp:rotateXYZ = (90, 0, 180)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.7000000104308128, 5.38, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "Window_Light_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float height = 3
                float intensity = 10
                bool normalize = 1
                float shaping:cone:angle = 60
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                bool visibleInPrimaryRay = 1
                float width = 2
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (7.63, -2.85, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "Window_Light_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float height = 3
                float intensity = 10
                bool normalize = 1
                float shaping:cone:angle = 60
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                bool visibleInPrimaryRay = 1
                float width = 3
                double3 xformOp:rotateXYZ = (90, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1.3000000193715096, -9.18, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_C91D1765D2A048EB"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "Lamp_Light_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float intensity = 300
                bool normalize = 1
                float radius = 0.1
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-5.100000075995922, 1.8000000268220901, 1.1000000163912773)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_3D292044FE1CE140"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "Lamp_Light_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float colorTemperature = 4500
                bool enableColorTemperature = 1
                float intensity = 300
                bool normalize = 1
                float radius = 0.08
                float shaping:cone:angle = 60
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-3.3836599747141918, -3.847847911747067, 0.8)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Lamp_Light_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float colorTemperature = 4500
                bool enableColorTemperature = 1
                float intensity = 300
                bool normalize = 1
                float radius = 0.08
                float shaping:cone:angle = 60
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-3.7626213776552504, -3.847847911747067, 0.8)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_29E580DF917B38EE"
        {
            custom int preserveOriginalDrawCall = 1
            float3 xformOp:rotateXYZ = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

            def SphereLight "Lamp_Light_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float intensity = 300
                bool normalize = 1
                float radius = 0.05
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (4.75, -3.2, 1.1000000163912773)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_6D29AF44D2B7D75F"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "Lamp_Light_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float colorTemperature = 4500
                bool enableColorTemperature = 1
                float intensity = 300
                bool normalize = 1
                float radius = 0.1
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                bool visibleInPrimaryRay = 1
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.74, 0.335, 1.2)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_6113B9CA251BF80F"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_5D7FD2DA55113531"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_CF3DB599AE097AF9"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_17FBCC83E2E5C9F4"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_B781284B7A2B10F6"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_796393D0C831B30A"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_0AF48999E75F7C29"
        {
            def Xform "Sink" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = @../meshes/CJHouse/sink.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -90)
                double3 xformOp:scale = (1.01, 1.01, 1.01)
                double3 xformOp:translate = (-3.856, 1.7, -0.55)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Cabient" (
                    active = false
                )
                {
                }

                over "Top" (
                    active = false
                )
                {
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }
    }

    over "Looks"
    {
        over "mat_14ED28C3B4E63F58"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @../texture/paper/Paper004_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:displace_in = 0.01 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 255
                            float min = 0
                        }
                    }
                    displayGroup = "Displacement"
                    displayName = "Inwards Displacement"
                    doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                    hidden = false
                )
                asset inputs:height_texture = @../texture/paper/Paper004_height.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Displacement"
                    displayName = "Height Map"
                    doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @../texture/paper/Paper004_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @../texture/paper/Paper004_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:subsurface_measurement_distance = 0.19999999 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 16
                            float min = 0
                        }
                    }
                    displayGroup = "Subsurface"
                    displayName = "Subsurface Measurement Distance"
                    doc = """The distance between front and back surface of subsurface materials in millimeter, or the thickness of the surface.
This parameter is unused.
"""
                    hidden = false
                )
                asset inputs:subsurface_transmittance_texture = @../texture/paper/Paper004_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Subsurface"
                    displayName = "Subsurface Transmittance Map"
                    doc = """The texture specifying the transmittance color of subsurface materials.
This parameter is unused.
"""
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }
    }
}

