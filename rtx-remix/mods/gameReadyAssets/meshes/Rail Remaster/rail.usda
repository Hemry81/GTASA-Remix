#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (50000, 0, 0)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (500, 500, 500)
                double3 target = (-0.000003978038705554354, -0.000003978038478180679, 0.000007956076956361358)
            }
            dictionary Right = {
                double3 position = (0, -50000, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./rail.usda"
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "Root"
    upAxis = "Z"
)

def Xform "Root"
{
    def Material "rail"
    {
        token outputs:mdl:displacement.connect = </Root/rail/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Root/rail/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Root/rail/Shader.outputs:out>
        token ui:displayGroup = "Material Graphs"
        token ui:displayName = "rail"
        int ui:order = 1024
        uniform token[] xformOpOrder = []

        def Shader "Shader"
        {
            reorder properties = ["inputs:diffuse_color_constant", "inputs:opacity_constant", "inputs:diffuse_texture", "inputs:enable_thin_film", "inputs:thin_film_thickness_from_albedo_alpha", "inputs:thin_film_thickness_constant", "inputs:reflection_roughness_constant", "inputs:reflectionroughness_texture", "inputs:anisotropy_constant", "inputs:anisotropy_texture", "inputs:metallic_constant", "inputs:metallic_texture", "inputs:enable_emission", "inputs:emissive_color_constant", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:sprite_sheet_fps", "inputs:sprite_sheet_cols", "inputs:sprite_sheet_rows", "inputs:ignore_material", "inputs:use_legacy_alpha_state", "inputs:blend_enabled", "inputs:blend_type", "inputs:inverted_blend", "inputs:alpha_test_type", "inputs:alpha_test_reference_value", "inputs:normalmap_texture", "inputs:encoding", "inputs:height_texture", "inputs:displace_in"]
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @D:/Games/Grand Theft Auto San Andreas/rtx-remix/mods/gameReadyAssets/materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            float inputs:alpha_test_reference_value = 0 (
                customData = {
                    float default = 0
                }
                displayGroup = "Material Flags"
                displayName = "Alpha Test Reference Value"
                doc = "The value to use for alpha testing against."
                hidden = false
            )
            int inputs:alpha_test_type = 0 (
                customData = {
                    int default = 0
                }
                displayGroup = "Material Flags"
                displayName = "Alpha Test Type"
                doc = "The alpha state alpha test type to use."
                hidden = false
                renderType = "::Z73file_3A::Z17D_3A::Games::Z00Grand_2520Theft_2520Auto_2520San_2520Andreas::Z58rtx_2Dremix::mods::gameReadyAssets::materials::ZF2AperturePBR_5FOpacity_2Emdl::AlphaTestType"
                sdrMetadata = {
                    string __SDR__enum_value = "Always"
                    string options = "Always:0|Never:1|Less:2|Equal:3|LessOrEqual:4|Greater:5|NotEqual:6|GreaterOrEqual:7"
                }
            )
            float inputs:anisotropy_constant = 0 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = -1
                    }
                }
                displayGroup = "Specular"
                displayName = "Anisotropy Amount"
                doc = "0 for isotropic, extents of -1 to 1 for anisotropy"
                hidden = false
            )
            asset inputs:anisotropy_texture = @@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Anisotropy Map"
                hidden = false
            )
            bool inputs:blend_enabled = 0 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Material Flags"
                displayName = "Blend Enabled"
                doc = "Indicates if alpha state blending should be enabled."
                hidden = false
            )
            int inputs:blend_type = 0 (
                customData = {
                    int default = 0
                }
                displayGroup = "Material Flags"
                displayName = "Blend Type"
                doc = "The alpha state blend type to use."
                hidden = false
                renderType = "::Z73file_3A::Z17D_3A::Games::Z00Grand_2520Theft_2520Auto_2520San_2520Andreas::Z58rtx_2Dremix::mods::gameReadyAssets::materials::ZF2AperturePBR_5FOpacity_2Emdl::BlendType"
                sdrMetadata = {
                    string __SDR__enum_value = "Alpha"
                    string options = "Alpha:0|AlphaEmissive:1|ReverseAlphaEmissive:2|Color:3|ColorEmissive:4|ReverseColorEmissive:5|Emissive:6|Multiplicative:7|DoubleMultiplicative:8"
                }
            )
            color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Base Color"
                doc = "The base albedo color to use if no texture is specified"
                hidden = false
            )
            asset inputs:diffuse_texture = @./rail_albedo.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                hidden = false
            )
            float inputs:displace_in = 1 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 255
                        float min = 0
                    }
                }
                displayGroup = "Displacement"
                displayName = "Inwards Displacement"
                doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                hidden = false
            )
            color3f inputs:emissive_color_constant = (1, 0.1, 0.1) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emissive color when no emissive color texture is specified."
                hidden = false
            )
            float inputs:emissive_intensity = 40 (
                customData = {
                    float default = 40
                    dictionary range = {
                        float max = 65504
                        float min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
                hidden = false
            )
            asset inputs:emissive_mask_texture = @@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Emissive"
                displayName = "Emissive Mask Map"
                doc = "The texture masking the emissive color"
                hidden = false
            )
            bool inputs:enable_emission = 0 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emission"
                doc = "Enables the emission of light from the material"
                hidden = false
            )
            bool inputs:enable_thin_film = 0 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Diffuse"
                displayName = "Enable thin film"
                doc = "Adds a thin film coating to the material"
                hidden = false
            )
            int inputs:encoding = 0 (
                customData = {
                    int default = 0
                }
                displayGroup = "Normal"
                displayName = "Normal Map Encoding"
                doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                hidden = false
                renderType = "::Z73file_3A::Z17D_3A::Games::Z00Grand_2520Theft_2520Auto_2520San_2520Andreas::Z58rtx_2Dremix::mods::gameReadyAssets::materials::AperturePBR_Normal::normalmap_encoding"
                sdrMetadata = {
                    string __SDR__enum_value = "octahedral"
                    string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                }
            )
            bool inputs:excludeFromWhiteMode = 0 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Material Flags"
                displayName = "Exclude from White Mode"
                hidden = false
            )
            asset inputs:height_texture = @@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Displacement"
                displayName = "Height Map"
                doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                hidden = false
            )
            bool inputs:ignore_material = 0 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Material Flags"
                displayName = "Ignore Material"
                doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                hidden = false
            )
            bool inputs:inverted_blend = 0 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Material Flags"
                displayName = "Inverted Blend"
                doc = "Indicates if an inverted blend type should be used."
                hidden = false
            )
            float inputs:metallic_constant = 1 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
                hidden = false
            )
            asset inputs:metallic_texture = @@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Metallic Map"
                hidden = false
            )
            asset inputs:normalmap_texture = @./rail_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
            )
            float inputs:opacity_constant = 1 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Opacity Amount"
                doc = "Used when no albedo texture is specified. 0 for completely transparent, 1 for completly opaque."
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            asset inputs:reflectionroughness_texture = @./rail_rough.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
            )
            int inputs:sprite_sheet_cols = 1 (
                customData = {
                    int default = 1
                    dictionary range = {
                        int max = 255
                        int min = 1
                    }
                }
                displayGroup = "Emissive"
                displayName = "Spritesheet Columns"
                doc = "Number of columns the emissive map is divided into"
                hidden = false
            )
            int inputs:sprite_sheet_fps = 0 (
                customData = {
                    int default = 0
                    dictionary range = {
                        int max = 255
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Spritesheet FPS"
                doc = "Frames Per Second if the emissive map is a spritesheet"
                hidden = false
            )
            int inputs:sprite_sheet_rows = 1 (
                customData = {
                    int default = 1
                    dictionary range = {
                        int max = 255
                        int min = 1
                    }
                }
                displayGroup = "Emissive"
                displayName = "Spritesheet Rows"
                doc = "Number of row the emissive map is divided into"
                hidden = false
            )
            float inputs:thin_film_thickness_constant = 200 (
                customData = {
                    float default = 200
                    dictionary range = {
                        float max = 1500
                        float min = 0.001
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Thin film constant thickness in nm"
                doc = "Thickness of the thin film if not specified in albedo texture"
                hidden = false
            )
            bool inputs:thin_film_thickness_from_albedo_alpha = 0 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Diffuse"
                displayName = "Thin film thickness from albedo alpha"
                doc = "Uses the alpha channel from albedo as source for the thin film thickness. Alpha value is scaled by 1500 and represents thickness in nanometers. Opacity becomes fully opaque in this case."
                hidden = false
            )
            bool inputs:use_legacy_alpha_state = 1 (
                customData = {
                    bool default = 1
                }
                displayGroup = "Material Flags"
                displayName = "Use Legacy Alpha State"
                doc = "Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL."
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }
}

