#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (50000, 0, 0)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (500, 500, 500)
                double3 target = (-0.000003978038705554354, -0.000003978038478180679, 0.000007956076956361358)
            }
            dictionary Right = {
                double3 position = (0, -50000, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./trees.usda"
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    upAxis = "Z"
)

over "RootNode"
{
    over "meshes"
    {
        over "mesh_365E2230D8952D58"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_C6DCFFEA35D9DC11"
        {
            def Xform "Maple_Tree_01_Branch" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = @./Maple_Tree_01_Branch.usd@
            )
            {
                rel material:binding = </Looks/Maple_Tree_Trunk_White> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_F49A64B982B0D95B"
        {
            def Xform "Maple_Tree_01_Leaves" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = @./Maple_Tree_01_Leaves.usd@
            )
            {
                rel material:binding = </Looks/Maple_Tree_Levaes> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_85F8456FD83C0613"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Maple_Tree_Trunk_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = @./Maple_Tree_02_Branch.usd@
            )
            {
                rel material:binding = </Looks/Maple_Tree_Trunk_White> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_606304C40F6D2799"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Maple_Tree_Leaves_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = @./Maple_Tree_02_Leaves.usd@
            )
            {
                rel material:binding = </Looks/Maple_Tree_Levaes> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_ED2E63DF2B74459C"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Maple_Tree_Trunk_03" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = @./Maple_Tree_03_Branch.usd@
            )
            {
                rel material:binding = </Looks/Maple_Tree_Trunk_White> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_88ACFF095C197877"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "Maple_Tree_Leaves_03" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = @./Maple_Tree_03_Leaves.usd@
            )
            {
                rel material:binding = </Looks/Maple_Tree_Levaes> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_EE805896328AF4F3"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "elm_trunk_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = @./elm_01_Branch.usd@
            )
            {
                rel material:binding = </Looks/elm_Tree_Trunk> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_E94A50FBDD015F79"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Xform "elm_leaves_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = @./elm_01_Leaves.usd@
            )
            {
                rel material:binding = </Looks/elm_Tree_Levaes> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }
    }
}

over "Looks"
{
    def Material "Maple_Tree_Trunk"
    {
        token outputs:mdl:displacement.connect = </Looks/Maple_Tree_Trunk/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Maple_Tree_Trunk/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Maple_Tree_Trunk/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./textures/Maple_Tree_Trunk_albedo.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Albedo/Opacity Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:normalmap_texture = @./textures/Maple_Tree_Trunk_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:reflectionroughness_texture = @./textures/Maple_Tree_Trunk_rough.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Roughness Map"
                doc = """A single channel texture defining roughness per texel.  Higher roughness values lead to more blurry reflections.

"""
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Maple_Tree_Levaes"
    {
        token outputs:mdl:displacement.connect = </Looks/Maple_Tree_Levaes/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Maple_Tree_Levaes/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Maple_Tree_Levaes/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            int inputs:alpha_test_type = 5 (
                customData = {
                    int default = 0
                }
                displayGroup = "Alpha Blending"
                displayName = "Alpha Test Type"
                doc = """The alpha state alpha test type to use.
This parameter is unused.
"""
                hidden = false
                renderType = "AlphaTestType"
                sdrMetadata = {
                    string __SDR__enum_value = "Always"
                    string options = "Always:0|Never:1|Less:2|Equal:3|LessOrEqual:4|Greater:5|NotEqual:6|GreaterOrEqual:7"
                }
            )
            bool inputs:blend_enabled = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Alpha Blending"
                displayName = "Blend Enabled"
                doc = """Indicates if alpha state blending should be enabled.

"""
                hidden = false
            )
            asset inputs:diffuse_texture = @./textures/Maple_Tree_Levaes_albedo.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Albedo/Opacity Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:normalmap_texture = @./textures/Maple_Tree_Levaes_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:reflectionroughness_texture = @./textures/Maple_Tree_Levaes_rough.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Roughness Map"
                doc = """A single channel texture defining roughness per texel.  Higher roughness values lead to more blurry reflections.

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:subsurface_measurement_distance = 0.005 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 16
                        float min = 0
                    }
                }
                displayGroup = "Subsurface"
                displayName = "Measurement Distance"
                doc = """The distance between front and back surface of subsurface materials in millimeter, or the thickness of the surface. (Used if no texture is specified).
This parameter is unused.
"""
                hidden = false
            )
            asset inputs:subsurface_transmittance_texture = @./textures/Maple_Tree_Levaes_translucency.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Subsurface"
                displayName = "Transmittance Map"
                doc = """The texture specifying the transmittance color of subsurface materials.
This parameter is unused.
"""
                hidden = false
                renderType = "texture_2d"
            )
            bool inputs:use_legacy_alpha_state = 0 (
                customData = {
                    bool default = 1
                }
                displayGroup = "Alpha Blending"
                displayName = "Use Legacy Alpha State"
                doc = """Indicates if the alpha state should be driven by the game itself, or overridden by this material.

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Maple_Tree_Trunk_White"
    {
        token outputs:mdl:displacement.connect = </Looks/Maple_Tree_Trunk_White/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Maple_Tree_Trunk_White/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Maple_Tree_Trunk_White/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./textures/Maple_Tree_Trunk_White_albedo.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Albedo/Opacity Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:normalmap_texture = @./textures/Maple_Tree_Trunk_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:reflectionroughness_texture = @./textures/Maple_Tree_Trunk_rough.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Roughness Map"
                doc = """A single channel texture defining roughness per texel.  Higher roughness values lead to more blurry reflections.

"""
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "elm_Tree_Levaes"
    {
        token outputs:mdl:displacement.connect = </Looks/elm_Tree_Levaes/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/elm_Tree_Levaes/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/elm_Tree_Levaes/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            int inputs:alpha_test_type = 5 (
                customData = {
                    int default = 0
                }
                displayGroup = "Alpha Blending"
                displayName = "Alpha Test Type"
                doc = """The alpha state alpha test type to use.
This parameter is unused.
"""
                hidden = false
                renderType = "AlphaTestType"
                sdrMetadata = {
                    string __SDR__enum_value = "Always"
                    string options = "Always:0|Never:1|Less:2|Equal:3|LessOrEqual:4|Greater:5|NotEqual:6|GreaterOrEqual:7"
                }
            )
            bool inputs:blend_enabled = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Alpha Blending"
                displayName = "Blend Enabled"
                doc = """Indicates if alpha state blending should be enabled.

"""
                hidden = false
            )
            asset inputs:diffuse_texture = @./textures/elm_Leaves_albedo.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Albedo/Opacity Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:normalmap_texture = @./textures/elm_Leaves_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:reflectionroughness_texture = @./textures/elm_Leaves_rough.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Roughness Map"
                doc = """A single channel texture defining roughness per texel.  Higher roughness values lead to more blurry reflections.

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:subsurface_measurement_distance = 0.005 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 16
                        float min = 0
                    }
                }
                displayGroup = "Subsurface"
                displayName = "Measurement Distance"
                doc = """The distance between front and back surface of subsurface materials in millimeter, or the thickness of the surface. (Used if no texture is specified).
This parameter is unused.
"""
                hidden = false
            )
            asset inputs:subsurface_transmittance_texture = @./textures/elm_Leaves_translucency.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Subsurface"
                displayName = "Transmittance Map"
                doc = """The texture specifying the transmittance color of subsurface materials.
This parameter is unused.
"""
                hidden = false
                renderType = "texture_2d"
            )
            bool inputs:use_legacy_alpha_state = 0 (
                customData = {
                    bool default = 1
                }
                displayGroup = "Alpha Blending"
                displayName = "Use Legacy Alpha State"
                doc = """Indicates if the alpha state should be driven by the game itself, or overridden by this material.

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "elm_Tree_Trunk"
    {
        token outputs:mdl:displacement.connect = </Looks/elm_Tree_Trunk/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/elm_Tree_Trunk/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/elm_Tree_Trunk/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./textures/elm_Trunk_albedo.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Albedo/Opacity Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:normalmap_texture = @./textures/elm_Trunk_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:reflectionroughness_texture = @./textures/elm_Trunk_rough.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Roughness Map"
                doc = """A single channel texture defining roughness per texel.  Higher roughness values lead to more blurry reflections.

"""
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }
}

