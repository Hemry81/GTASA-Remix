#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (500, 0, 0)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (500, 500, 500)
                double3 target = (-0.000003978038705554354, -0.000003978038478180679, 0.000007956076956361358)
            }
            dictionary Right = {
                double3 position = (0, -500, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 0, 500)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./Red_Country_Tunnel_Light_1a.usda"
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "root"
    doc = "Blender v4.2.1 LTS"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "Light_03"
    {
        custom string userProperties:blender:object_name = "Light_03"
        float3 xformOp:rotateXYZ = (0, -0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (77.48504638671875, -85.00126647949219, -5.1240234375)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def SphereLight "Point_002"
        {
            float3[] extent = [(-0, -0, -0), (0, 0, 0)]
            color3f inputs:color = (1, 1, 1)
            float inputs:diffuse = 1
            float inputs:exposure = 0
            float inputs:intensity = 3.1830988
            bool inputs:normalize = 1
            float inputs:radius = 0
            float inputs:specular = 1
            bool treatAsPoint = 1
            custom string userProperties:blender:data_name = "Point.002"
        }
    }

    def Xform "Light_02"
    {
        custom string userProperties:blender:object_name = "Light_02"
        float3 xformOp:rotateXYZ = (0, -0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (63.84295654296875, -31.534713745117188, -0.9396991729736328)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def SphereLight "Point_001"
        {
            float3[] extent = [(-0, -0, -0), (0, 0, 0)]
            color3f inputs:color = (1, 1, 1)
            float inputs:diffuse = 1
            float inputs:exposure = 0
            float inputs:intensity = 3.1830988
            bool inputs:normalize = 1
            float inputs:radius = 0
            float inputs:specular = 1
            bool treatAsPoint = 1
            custom string userProperties:blender:data_name = "Point.001"
        }
    }

    def Xform "Light_01"
    {
        custom string userProperties:blender:object_name = "Light_01"
        float3 xformOp:rotateXYZ = (0, -0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (17.1240234375, 31.231582641601562, 6.471290588378906)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def SphereLight "Point"
        {
            float3[] extent = [(-0, -0, -0), (0, 0, 0)]
            color3f inputs:color = (1, 1, 1)
            float inputs:diffuse = 1
            float inputs:exposure = 0
            float inputs:intensity = 3.1830988
            bool inputs:normalize = 1
            float inputs:radius = 0
            float inputs:specular = 1
            bool treatAsPoint = 1
            custom string userProperties:blender:data_name = "Point"
        }
    }
}

